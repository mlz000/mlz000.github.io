<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[mlz000's Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://mlz000.github.io//"/>
  <updated>2015-09-24T08:42:47.895Z</updated>
  <id>http://mlz000.github.io//</id>
  
  <author>
    <name><![CDATA[mlz000]]></name>
    <email><![CDATA[mlz000@outlook.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[srm 545]]></title>
    <link href="http://mlz000.github.io/2015/09/24/srm-545/"/>
    <id>http://mlz000.github.io/2015/09/24/srm-545/</id>
    <published>2015-09-24T08:35:00.000Z</published>
    <updated>2015-09-24T08:42:47.895Z</updated>
    <content type="html"><![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_1/collectPlayer.swf" type="application/x-shockwave-flash" width="235" height="346" wmode="opaque">

<h1 id="275">275</h1><p><hr></p>
<h2 id="Description">Description</h2><p>让你构造一个长度为$n$的串，逆序数恰好为$m$且字典序比某字符串$string$大，请构造字典序最小的这样的串。</p>
<h2 id="Solution">Solution</h2><p>数据范围非常小，暴力搜索即可</p>
<h2 id="Code"><a href="https://github.com/mlz000/topcoder/blob/master/srm545/275.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">26</span>;</span><br><span class="line"><span class="built_in">string</span> ans;</span><br><span class="line"><span class="keyword">struct</span> StrIIRec &#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> minInv, <span class="built_in">string</span> minStr, <span class="built_in">set</span>&lt;<span class="keyword">char</span>&gt; S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (minInv &gt; (n - <span class="number">1</span>) * n / <span class="number">2</span>)   <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">string</span>(<span class="number">1</span>, *S.begin());</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (!minStr.size()) minStr = <span class="string">"a"</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">set</span>&lt;<span class="keyword">char</span>&gt;:: iterator it = S.begin(); it != S.end(); it++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (*it &gt;= minStr[<span class="number">0</span>]) &#123;</span><br><span class="line">                <span class="built_in">set</span>&lt;<span class="keyword">char</span>&gt; f = S;</span><br><span class="line">                f.erase(*it);</span><br><span class="line">                <span class="built_in">string</span> t;</span><br><span class="line">                <span class="keyword">if</span> (*it == minStr[<span class="number">0</span>])   t = dfs(n - <span class="number">1</span>, minInv - cnt, <span class="built_in">string</span>(minStr, <span class="number">1</span>), f);</span><br><span class="line">                <span class="keyword">else</span> t = dfs(n - <span class="number">1</span>, minInv - cnt, <span class="string">""</span>, f);</span><br><span class="line">                <span class="keyword">if</span> (t.size())   <span class="keyword">return</span> *it + t;</span><br><span class="line">            &#125;</span><br><span class="line">            ++cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">recovstr</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> minInv, <span class="built_in">string</span> minStr)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">char</span>&gt; S;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)    S.insert(<span class="string">'a'</span> + i);</span><br><span class="line">        <span class="built_in">string</span> ans = dfs(n, minInv, minStr, S);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="500">500</h1><p><hr></p>
<h2 id="Description-1">Description</h2><p> 你可以在$H\times L$的网格上以$(x,0)$为起点画一条非水平的射线，$0\le x\le L$，且为整数。在这个射线上每次要取$k$个整数坐标。问一共可以取得多少个不同的坐标集合$(1\le H,L,K\le 2000)。$</p>
<h2 id="Solution-1">Solution</h2><p>暴力枚举$dx, dy$，当$gcd(dx,dy)=1$的时候这个就相当于枚举斜率啦，然后我们需要枚举$x$,显然枚举会超时，我们考虑只有当$x+=dx,y+=dy$的时候，点数才可能会发生变化，枚举即可。</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/topcoder/blob/master/srm545/500.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2005</span>, M = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> c[N][N];</span><br><span class="line"><span class="keyword">struct</span> Spacetsk &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countsets</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> H, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (K == <span class="number">1</span>) <span class="keyword">return</span> (H + <span class="number">1</span>) * (L + <span class="number">1</span>) % M;</span><br><span class="line">        c[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2001</span>; ++i) &#123;</span><br><span class="line">            c[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; ++j)    c[i][j] = (c[i - <span class="number">1</span>][j] + c[i - <span class="number">1</span>][j - <span class="number">1</span>]) % M;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= L; ++i)    (ans += c[H + <span class="number">1</span>][K]) %= M;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> dx = <span class="number">1</span>; dx &lt;= L; ++dx)</span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">int</span> dy = <span class="number">1</span>; dy &lt;= H; ++dy) &#123;</span><br><span class="line">                <span class="keyword">if</span> (__gcd(dx, dy) == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> sum = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>; x &lt;= L; x += dx, y += dy) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (y &lt;= H) ++cnt;  </span><br><span class="line">                        <span class="keyword">int</span> num = min(dx, L - x + <span class="number">1</span>);</span><br><span class="line">                        (sum += <span class="number">1l</span>l * num * c[cnt][K] % M) %= M;</span><br><span class="line">                    &#125;</span><br><span class="line">                    (ans += sum * <span class="number">2</span> % M) %= M;</span><br><span class="line">                &#125;</span><br><span class="line">             &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_1/collectPlayer.swf" type="application/x-shockwave-flash" wi]]>
    </summary>
    
      <category term="topcoder题解" scheme="http://mlz000.github.io/categories/topcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[srm 518(有FWT的题QvQ)]]></title>
    <link href="http://mlz000.github.io/2015/09/20/srm-518-%E6%9C%89FWT%E7%9A%84%E9%A2%98QvQ/"/>
    <id>http://mlz000.github.io/2015/09/20/srm-518-有FWT的题QvQ/</id>
    <published>2015-09-20T15:59:06.000Z</published>
    <updated>2015-09-24T08:35:20.441Z</updated>
    <content type="html"><![CDATA[<p><embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" width="235" height="346" wmode="opaque"></p>
<h1 id="250">250</h1><h2 id="Description">Description</h2><p>从一个字符串中找一字典序最大的字串</p>
<h2 id="Solution">Solution</h2><p>从左至右贪心即可</p>
<h1 id="500">500</h1><h2 id="Description-1">Description</h2><p>有一个序列，每次可以将一个数$-1$需要花费$1$的代价，问最后使得序列满足$2a[i]\le a[i-1]+a[i+1]$</p>
<h2 id="Solution-1">Solution</h2><p>因为满足$a[i-1]-a[i]\ge a[i]-a[i+1]$,也就是说序列相邻两项差是递减的，所以每当不满足条件时暴力调整$a[i]$，直到不需要调整为止。想想极限数据调整次数即可直到复杂度是靠谱的。</p>
<h1 id="1000">1000</h1><h2 id="Description-2">Description</h2><p>求符合以下条件的序列个数</p>
<ul>
<li>1:长度为K</li>
<li>2:每个元素大小不超过L</li>
<li>3:每个数都是质数</li>
<li>4:所有数异或和为0</li>
</ul>
<p>$K\le{10^{9}},L\le{5\times{10^{4}}}$</p>
<h2 id="Solution-2">Solution</h2><p>基本的递推方程很容易列出来$f[i][j]$表示前$i$个数异或和为$j$的方案数<br>$f[i][x\otimes y]=\sum_{0\le x,y\le 2^{16}} f[i-1][x]\times f[1][y]$<br>$f[1][y]=1$当且仅当$y$为质数且$y\le L$<br>这样暴力递推显然是$O(KL^2)$的,$i$为偶数时分治一下可以做到$O(L^2\times logK)$的，复杂度还是不行<br>然后我们可以想到把这个东西搞成类似于FFT的东西。<br>设向量a,b,c,定义向量之间的运算$　\$,c=a \$ b　$<br>$c[i\otimes j]=\sum a[i]\times b[j],做变换tf,使得tf(a\$b)=tf(a)\times tf(b),逆变换dft(tf(x))=x$<br>设$a$向量，$a[i]$表示$i$堆石子异或和为$0\sim 2^{16}$的方案数，$a[1]$在素数位置处为$1$，其他位置为$0$<br>这样我们只需要用$logK$的时间算出$tf(a[1])^K$,在做逆变换得到$a[k]$即为答案<br>观察tf和dtf的性质，当只有一个元素时，$tf(x)=dtf(x)=x$<br>当有两个元素$X=(a,b),Y=(c,d)$时<br>$Z=X\$Y$<br>$Z[0]=X[0]\times Y[0]+X[1]\times Y[1]=ac+bd$<br>$Z[1]=X[0]\times Y[1]+X[1]\times Y[0]=ad+bc$<br>$另tf(a,b)=(a-b,a+b)$<br>则$tf(X)\times tf(Y) =(a-b,a+b)\times(c-d,c+d)$<br>$=((a-b)\times(c-d),(a+b)\times(c+d))$<br>$=(ac+bd-ad-bc,ac+bd+ad+bc)$<br>$=tf(ac+bd,ac-bd)$<br>$=tf((a,b)\$(c,d))$<br>$=tf(X\$Y)$<br>$有A，B两向量，用归纳法可证明出tf(A + B) = tf(A) + tf(B) $<br>$如果我们将X向量分成两段等长的向量X[1],X[2]$<br>我们归纳一下会发现$tf(X[1],X[2])=(tf(X1) - tf(X2), tf(X1) + tf(X2))$</p>
<p>$(X[1]-X[2])[i]=X[1][i]-X[2][i]$<br>$(X[1]+X[2])[i]=X[1][i]+X[2][i]$<br>$将A分为A[1],A[2],B分为B[1],B[2]$<br>$则依旧可以归纳证出tf( (A1,A2) \$ (B1,B2) ) = tf(A1,A2)\times{tf(B1,B2)}$<br>$即对任意向量A，B，tf(A\$B)=tf(A)\times{tf(B)}$<br>$说明当有两个元素时,tf(a,b)=(a-b,a+b)正好就是我们所需要的变换$<br>然后我们就可以用$tf(X[1],X[2])=(tf(X1) - tf(X2), tf(X1) + tf(X2))$来做啦<br>算出$tf(a[1])^K$,在做逆变换得到a[K]即为答案<br><img src="http://user-image.logdown.io/user/8987/blog/8877/post/221264/XAutFOlQ6muTRxZbqDmD_QQ%20Photo20140831154228.gif" alt=""><br>还有不明白的可以看<a href="http://apps.topcoder.com/wiki/display/tc/SRM+518" target="_blank" rel="external">http://apps.topcoder.com/wiki/display/tc/SRM+518</a></p>
<h2 id="Code">Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1</span>&lt;&lt;<span class="number">16</span>,M=<span class="number">1000000007</span>;</span><br><span class="line">ll a[N],inv2;</span><br><span class="line"><span class="function">ll <span class="title">P</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">	ll tmp=<span class="number">1l</span>l;</span><br><span class="line">	<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(y&amp;<span class="number">1</span>)	tmp=tmp*x%M;</span><br><span class="line">		x=x*x%M;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">trans</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r-<span class="number">1</span>)	<span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">int</span> len=(r-l)/<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">int</span> mid=l+len;</span><br><span class="line">	trans(l,mid),trans(mid,r);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;mid;++i)&#123;</span><br><span class="line">		ll x1=(a[i]-a[i+len]+M)%M,x2=(a[i]+a[i+len])%M;</span><br><span class="line">		a[i]=x1,a[i+len]=x2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(r-l==<span class="number">1</span>)	<span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">int</span> len=(r-l)/<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">int</span> mid=l+len;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;mid;++i)&#123;</span><br><span class="line">		ll x1=a[i],x2=a[i+len];</span><br><span class="line">		a[i]=(x1+x2)*inv2%M;</span><br><span class="line">		a[i+len]=(x2-x1)*inv2%M;</span><br><span class="line">	&#125;</span><br><span class="line">	reverse(l,mid),reverse(mid,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Nim&#123;</span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> K, <span class="keyword">int</span> L)</span></span>&#123;</span><br><span class="line">            inv2=P(<span class="number">2</span>,M-<span class="number">2</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=L;++i)</span><br><span class="line">				<span class="keyword">if</span>(!a[i])</span><br><span class="line">					<span class="keyword">for</span>(<span class="keyword">int</span> j=i+i;j&lt;=L;j+=i)	a[j]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=L;++i)	a[i]^=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">int</span> Log=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">while</span>(Log&lt;=L)	Log&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">			trans(<span class="number">0</span>,Log);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Log;++i)	a[i]=P(a[i],K);</span><br><span class="line">			reverse(<span class="number">0</span>,Log);</span><br><span class="line">			<span class="keyword">return</span> a[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Code-1"><a href="https://github.com/mlz000/topcoder/tree/master/srm518" target="_blank" rel="external">Code</a></h1>]]></content>
    <summary type="html">
    <![CDATA[<p><embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash"]]>
    </summary>
    
      <category term="topcoder题解" scheme="http://mlz000.github.io/categories/topcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[codechef 3D Queries(MGCH3D)]]></title>
    <link href="http://mlz000.github.io/2015/09/18/codechef-3D-Queries-MGCH3D/"/>
    <id>http://mlz000.github.io/2015/09/18/codechef-3D-Queries-MGCH3D/</id>
    <published>2015-09-18T09:07:10.000Z</published>
    <updated>2015-09-20T16:02:01.501Z</updated>
    <content type="html"><![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" width="235" height="346" wmode="opaque">


<h1 id="题外话">题外话</h1><p>这个题是cc 9月challenge的最后一题，当时没仔细考虑，以为这是个近似计算的题。。。赛后看了题解才猛然醒悟</p>
<h1 id="codechef_3D_Queries(MGCH3D)">codechef 3D Queries(MGCH3D)</h1><h2 id="Description">Description</h2><p>求$\sum_{i!=j} \frac{|A(X_i - X_j) + B(Y_i - Y_j) + C(Z_i - Z_j) + D|}{N(N-1)\sqrt{(X_i-X_j)^4 + (Y_i-Y_j)^4+(Z_i-Z_j)^4}}$<br>$2\le N \le 777777,1\le X, Y, Z, A, B, C\le 77$, $Q(1\le Q\le 77)$组询问,每次给$A, B, C, D$, 求上式的值。</p>
<h2 id="Solution">Solution</h2><p>$x, y, z$坐标都很小($1\le x, y, z\le 77$)，差的取值也很小，不妨构造多项式$A[N^2\times x + N\times y + z] += 1$, $B[N^2\times (77-x)+N\times (77 - y)+(77-z)]+=1$。令$N=77*2$<br>我们发现$A\times B=N^2\times (77+x[i]-x[j]) + N\times (77+y[i]-y[j]) + (77+z[i]-z[j])$<br>显然$x[i]-x[j],y[i]-y[j],z[i]-z[j]$我们可以通过，于是这题FFT一下就做完了= =<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">153</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>);</span><br><span class="line"><span class="keyword">double</span> D[<span class="number">80</span>][<span class="number">80</span>][<span class="number">80</span>];</span><br><span class="line"><span class="keyword">namespace</span> FFT &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> W = <span class="number">1</span> &lt;&lt; <span class="number">22</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>);</span><br><span class="line">  <span class="keyword">struct</span> Complex &#123;</span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    Complex(<span class="keyword">double</span> _x = <span class="number">0</span>, <span class="keyword">double</span> _y = <span class="number">0</span>) : x(_x), y(_y) &#123;&#125;</span><br><span class="line">    Complex <span class="keyword">operator</span> + (<span class="keyword">const</span> Complex &amp;t) <span class="keyword">const</span> &#123;<span class="keyword">return</span> Complex(x + t.x, y + t.y);&#125;</span><br><span class="line">    Complex&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> Complex &amp;t) &#123;x += t.x, y += t.y;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">    Complex <span class="keyword">operator</span> - (<span class="keyword">const</span> Complex &amp;t) <span class="keyword">const</span> &#123;<span class="keyword">return</span> Complex(x-t.x,y-t.y);&#125;</span><br><span class="line">    Complex&amp; <span class="keyword">operator</span> -= (<span class="keyword">const</span> Complex &amp;t) &#123;x -= t.x, y -= t.y;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">    Complex <span class="keyword">operator</span> * (<span class="keyword">const</span> Complex &amp;t) <span class="keyword">const</span> &#123;<span class="keyword">return</span> Complex(x * t.x - y * t.y, x * t.y + y * t.x);&#125;</span><br><span class="line">    Complex <span class="keyword">operator</span> / (<span class="keyword">const</span> <span class="keyword">double</span> &amp;t) <span class="keyword">const</span> &#123;<span class="keyword">return</span> Complex(x / t,y / t);&#125;</span><br><span class="line">    Complex&amp; <span class="keyword">operator</span> /= (<span class="keyword">const</span> <span class="keyword">double</span> &amp;t) &#123;x /= t, y /= t;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">real</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> x;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">imag</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> y;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(Complex a[], <span class="keyword">int</span> n, <span class="keyword">int</span> rev)</span> </span>&#123;<span class="comment">// rev=-1, reverse</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>, k; i &lt; n; ++i) &#123;</span><br><span class="line">          <span class="keyword">for</span> (k = n &gt;&gt; <span class="number">1</span>; k &gt; (j ^= k); k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">          <span class="keyword">if</span> (i &lt; j) swap(a[i], a[j]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">1</span>, ss = <span class="number">2</span>; s &lt; n; s &lt;&lt;= <span class="number">1</span>,ss &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="function">Complex <span class="title">wn</span><span class="params">(<span class="built_in">cos</span>(2 * PI * rev / ss)</span>, <span class="title">sin</span><span class="params">(2 * PI * rev / ss)</span>), w</span>;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j ; i &lt; n; i += ss) &#123;</span><br><span class="line">              <span class="keyword">for</span> (j = i, w = <span class="number">1</span>; j &lt; i + s; ++j, w = w * wn) &#123;</span><br><span class="line">                  Complex t = w * a[j + s];</span><br><span class="line">                  a[j + s] = a[j] - t; </span><br><span class="line">                  a[j] = a[j] + t;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (rev == -<span class="number">1</span>) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) a[i] /= n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">FFT::Complex A[FFT::W], B[FFT::W];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">sqrr</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x * x * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x, y, z; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;z);</span><br><span class="line">        --x, --y, --z;</span><br><span class="line">        <span class="keyword">int</span> t1 = N * N * x + N * y + z, t2 = N * N * (<span class="number">76</span> - x) + N * (<span class="number">76</span> - y) + (<span class="number">76</span> - z);</span><br><span class="line">        A[t1].x += <span class="number">1</span>, B[t2].x += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">77</span>; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">77</span>; ++j)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">77</span>; ++k)</span><br><span class="line">                D[i][j][k] = <span class="built_in">sqrt</span>(sqrr(i) + sqrr(j) + sqrr(k));</span><br><span class="line">    FFT::fft(A, FFT::W, <span class="number">1</span>);</span><br><span class="line">    FFT::fft(B, FFT::W, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; FFT::W; ++i)    A[i] = A[i] * B[i];</span><br><span class="line">    FFT::fft(A, FFT::W, -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> a, b, c, d;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; FFT::W; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="keyword">int</span>(A[i].real() + <span class="number">0.5</span>);</span><br><span class="line">            <span class="keyword">if</span> (!cnt)   <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> x = i / (N * N) - <span class="number">76</span>, y = i / N % N - <span class="number">76</span>, z = i % N - <span class="number">76</span>;</span><br><span class="line">            <span class="keyword">if</span> (!x &amp;&amp; !y &amp;&amp; !z) <span class="keyword">continue</span>;</span><br><span class="line">            ans += <span class="built_in">fabs</span>(a * x + b * y + c * z + d) * cnt / D[<span class="built_in">abs</span>(x)][<span class="built_in">abs</span>(y)][<span class="built_in">abs</span>(z)];</span><br><span class="line">        &#125;</span><br><span class="line">        ans /= n, ans /= n - <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.10lf\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="总结">总结</h2><p>自己还是太年轻，一看范围小就想着想忽略近似计算和乱搞，犯了方向性的错误= =。。还是要多加思考QvQ</p>
]]></content>
    <summary type="html">
    <![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" wi]]>
    </summary>
    
      <category term="codechef题解" scheme="http://mlz000.github.io/categories/codechef%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[srm 544]]></title>
    <link href="http://mlz000.github.io/2015/09/17/srm-544/"/>
    <id>http://mlz000.github.io/2015/09/17/srm-544/</id>
    <published>2015-09-17T12:15:48.000Z</published>
    <updated>2015-09-18T09:07:34.428Z</updated>
    <content type="html"><![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" width="235" height="346" wmode="opaque">

<h1 id="275">275</h1><p><hr></p>
<h2 id="Description">Description</h2><p>给你一些百分比，四舍五入之后，问原来可不可能是百分之百</p>
<h2 id="Solution">Solution</h2><p>数据范围非常小，暴力枚举分子分母到$1000$即可，做法很多。。。</p>
<h2 id="Code"><a href="https://github.com/mlz000/topcoder/blob/master/srm544/275.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">struct</span> ElectionFraudDiv1 &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">MinimumVoters</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; percentages)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = percentages.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">bool</span> f = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = percentages[j];</span><br><span class="line">                <span class="keyword">bool</span> ok = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= i; ++k) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((<span class="keyword">int</span>)((<span class="number">100.0000</span> / i * k) + <span class="number">0.500005</span>) == x) &#123;</span><br><span class="line">                        ok = <span class="number">1</span>;</span><br><span class="line">                        l += k;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &gt;= <span class="number">0</span>; --k) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((<span class="keyword">int</span>)((<span class="number">100.0000</span> / i * k) + <span class="number">0.500005</span>) == x) &#123;</span><br><span class="line">                        ok = <span class="number">1</span>;</span><br><span class="line">                        r += k;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!ok)    f = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (f &amp;&amp; l &lt;= i &amp;&amp; i &lt;= r)  <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="500">500</h1><p><hr></p>
<h2 id="Description-1">Description</h2><p>给你一个$N\times M的$0/1$矩阵，你每次可以选一条最短路线的路线，把路线左下部$0/1$取反。问全矩阵变成$0$最少操作次数。</p>
<h2 id="Solution-1">Solution</h2><p>容易发现，每次最边界的是早晚都要取的，而且，$1$的边界线会逐渐变小。每次从上到下，找最右边界，翻转即可，数据范围很小，暴力即可，复杂度$O(N^2\times M^2)$</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/topcoder/blob/master/srm544/500.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">struct</span> FlipGame &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minOperations</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> n = board.size(), m = board[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            ++ans;</span><br><span class="line">            <span class="keyword">int</span> last = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">bool</span> ok = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">                    <span class="keyword">if</span> (board[i][j] == <span class="string">'1'</span>) ok = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (!ok)    <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = last + <span class="number">1</span>; j &lt; m; ++j)</span><br><span class="line">                    <span class="keyword">if</span> (board[i][j] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                        last = j;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= last; ++j) </span><br><span class="line">                    board[i][j] = (board[i][j] == <span class="string">'1'</span>) ? <span class="string">'0'</span> : <span class="string">'1'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" wi]]>
    </summary>
    
      <category term="topcoder题解" scheme="http://mlz000.github.io/categories/topcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015-ACM多校训练第五场]]></title>
    <link href="http://mlz000.github.io/2015/09/17/2015-ACM%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E7%AC%AC%E4%BA%94%E5%9C%BA/"/>
    <id>http://mlz000.github.io/2015/09/17/2015-ACM多校训练第五场/</id>
    <published>2015-09-17T08:30:33.000Z</published>
    <updated>2015-09-17T12:16:41.459Z</updated>
    <content type="html"><![CDATA[<p><embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" width="235" height="346" wmode="opaque"></p>
<h1 id="题外话">题外话</h1><p>第五套感觉难度适中，今天把它补掉了。。。</p>
<p><hr></p>
<h1 id="hdu_5343(1001)_MZL’s_Circle_Zhou">hdu 5343(1001) MZL’s Circle Zhou</h1><h2 id="Solution">Solution</h2><p>这题深深的暴露了自己$SAM$水平只差，每次遇到$SAM$的题，都不太能做出来，说到底还是对$SAM$理解不够深刻吧= =。。<br>由于是把两个串拼起来，容易想到，对第一个串正着建立$SAM$，第二个串反过来建$SAM$，用$dp[i]$表示第二个串中以$i$这个字符开头的串有多少个。<br>然后在第一个串$SAM$节点上，如果不能转移到字母$c$，答案加上$dp[c]$就好了<br>仔细想想，其实这题并不难= =。。。自己太弱了</p>
<h2 id="Code"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/5/01.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5344(1002)_MZL’s_xor">hdu 5344(1002) MZL’s xor</h1><h2 id="Solution-1">Solution</h2><p>水题，发现不同项都抵消掉了。。。</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/5/02.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5345(1003)_MZL’s_combat">hdu 5345(1003) MZL’s combat</h1><h2 id="Solution-2">Solution</h2><p>貌似有点烦，先跳过= =过段时间补</p>
<p><hr>  </p>
<h1 id="hdu_5346(1004)_MZL’s_game">hdu 5346(1004) MZL’s game</h1><h2 id="Solution-3">Solution</h2><p>dp好题，状态设计非常高端，和前几天CC月赛一个题思想非常相似，很好的idea。<br>正常dp复杂度无法保证，不妨考虑，一个选人顺序的全排列，如果一个人挂了，就继续选下一个人。由于每个人在每个位置概率都是$\frac{1}{n}$，我们不妨考虑编号$1 \sim n$。<br>这样转化后我们就可以做了！<br>考虑$dp[j][i]$表示$i$这个人受到$j$次攻击的概率,分两种情况考虑</p>
<ul>
<li>(1) 第$i-1$个人没挂，则第$j$次攻击是来自第$i-1$的人的，于是$dp[j][i] = dp[j-1][i-1]\times (1-p)^{j-1}$</li>
<li>(2) 第$i-1$个人挂掉了，则受到的攻击次数和第$i-1$个人相同，于是$dp[j][i] = dp[j][i-1]\times (1-(1-p)^j)$<br>于是就做完了，考虑全排列的这种思想，学到了。。</li>
</ul>
<h2 id="Code-2"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/5/04.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5347(1005)_MZL’s_chemistry">hdu 5347(1005) MZL’s chemistry</h1><h2 id="Solution-4">Solution</h2><p>无聊题，随手打个表</p>
<h2 id="Code-3"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/5/05.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5348(1006)_MZL’s_endless_loop">hdu 5348(1006) MZL’s endless loop</h1><h2 id="Solution-5">Solution</h2><p>类似于一笔画，奇数度的两两连一下，跑欧拉回路就完了</p>
<h2 id="Code-4"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/5/06.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5349(1007)_MZL’s_simple_problem">hdu 5349(1007) MZL’s simple problem</h1><h2 id="Solution-6">Solution</h2><p>水题，直接用set或者维护一下都可以</p>
<h2 id="Code-5"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/5/07.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5350(1008)_MZL’s_munhaff_function">hdu 5350(1008) MZL’s munhaff function</h1><h2 id="Solution-7">Solution</h2><p>其实这就是个huffman树的生成过程，想明白那个式子和它的转换关系即可</p>
<h2 id="Code-6"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/5/08.cpp" target="_blank" rel="external">Code</a></h2><hr>

<h1 id="hdu_5351(1009)_MZL’s_Border">hdu 5351(1009) MZL’s Border</h1><h2 id="Solution-8">Solution</h2><p>水题，关于$Fibonacci$的一般打个表就看出规律了，找第一个$i,m+1&lt;|fib[i]|$,答案就是$m-|fib[i-2]|$</p>
<h2 id="Code-7"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/5/09.java" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5352(1010)_MZL’s_City">hdu 5352(1010) MZL’s City</h1><h2 id="Solution-9">Solution</h2><p>很容易想到的做法是，把每个操作$1$拆成$k$个点，与能相连的城市连一条边，跑匹配即可，由于要求字典序最小，倒着跑匹配即可。也可用最大流，费用流来做</p>
<h2 id="Code-8"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/5/10.cpp" target="_blank" rel="external">Code</a></h2><p>完结撒花！<br>继续补题！&gt;_&lt;</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash"]]>
    </summary>
    
      <category term="hdu" scheme="http://mlz000.github.io/categories/hdu/"/>
    
      <category term="ACM多校题解" scheme="http://mlz000.github.io/categories/hdu/ACM%E5%A4%9A%E6%A0%A1%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[srm 543]]></title>
    <link href="http://mlz000.github.io/2015/09/14/srm-543/"/>
    <id>http://mlz000.github.io/2015/09/14/srm-543/</id>
    <published>2015-09-14T12:52:09.000Z</published>
    <updated>2015-09-17T08:31:51.905Z</updated>
    <content type="html"><![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" width="235" height="346" wmode="opaque">

<h1 id="250">250</h1><p><hr><br>求$A, B(A,B\le 4\times 10^{12})$之间所有数的$XOR$</p>
<h2 id="Solution">Solution</h2><p>转换成$1\sim B$异或和异或$1\sim A$异或和，容易发现当$n\ge 2时，1~\sim 2^n-1异或和为0$，$0,1,2,3$特判即可</p>
<h2 id="Code"><a href="https://github.com/mlz000/topcoder/blob/master/srm543/250.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="function">LL <span class="title">gao</span><span class="params">(LL x)</span> </span>&#123;</span><br><span class="line">    LL t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">40</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        LL p = <span class="number">1l</span>l &lt;&lt; i;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">3</span> || !x) <span class="keyword">return</span> t;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">2</span>) <span class="keyword">return</span> t + <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">1</span>) <span class="keyword">return</span> t + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (p &lt;= x) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((x - p + <span class="number">1</span>) &amp; <span class="number">1</span>)    t += p;</span><br><span class="line">            x ^= p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> EllysXors &#123;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getXor</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> L, <span class="keyword">long</span> <span class="keyword">long</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gao(R) ^ gao(L - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="500">500</h1><p><hr></p>
<h2 id="Description">Description</h2><p>在一个横坐标轴上有若干个垂直的线段.每个线段之间的距离为$width[i]$,现在让你从最左线段的左下角运动到最右线段的右上角<br>线段之间的运行速度为speed[i],在线段上垂直运动的速度为$walk$线段之间只能从整数坐标点运动到整数坐标点, 每个线段的高度都是一个定值$length$<br>请问最快多久可以到达目的地<br>$length\le 100000$</p>
<h2 id="Solution-1">Solution</h2><p>很容易想到dp,$dp[i][j]$表示过了前$i$个线段，当前在$j$的答案，暴力转移复杂度爆炸，容易发现，在每个线段的答案沿高度是单调的，转移时维护上一次转移的位置即可。</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/topcoder/blob/master/srm543/500.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> inf = <span class="number">1e20</span>;</span><br><span class="line"><span class="keyword">double</span> dp[<span class="number">2</span>][<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">struct</span> EllysRivers &#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getMin</span><span class="params">(<span class="keyword">int</span> length, <span class="keyword">int</span> walk, <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; width, <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; speed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = width.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= length; ++i)   dp[<span class="number">0</span>][i] = (<span class="keyword">double</span>)i / walk;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= length; ++j)   dp[i &amp; <span class="number">1</span>][j] = inf;</span><br><span class="line">            <span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= length; ++j)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = last; k &lt;= j; ++k) &#123;</span><br><span class="line">                    <span class="keyword">double</span> t =  dp[(i - <span class="number">1</span>) &amp; <span class="number">1</span>][k] + hypot(width[i - <span class="number">1</span>], j - k) / speed[i - <span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> (t &gt; dp[i &amp; <span class="number">1</span>][j])   <span class="keyword">break</span>;</span><br><span class="line">                    dp[i &amp; <span class="number">1</span>][j] = t;</span><br><span class="line">                    last = k;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n &amp; <span class="number">1</span>][length];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" wi]]>
    </summary>
    
      <category term="topcoder题解" scheme="http://mlz000.github.io/categories/topcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015-ACM多校训练第四场]]></title>
    <link href="http://mlz000.github.io/2015/09/14/2015-ACM%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E7%AC%AC%E5%9B%9B%E5%9C%BA/"/>
    <id>http://mlz000.github.io/2015/09/14/2015-ACM多校训练第四场/</id>
    <published>2015-09-14T10:22:15.000Z</published>
    <updated>2015-09-14T13:03:15.320Z</updated>
    <content type="html"><![CDATA[<p><embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" width="235" height="346" wmode="opaque"></p>
<h1 id="题外话">题外话</h1><p>思考了一下人生，快打regional了，功利一点说多校的题并不需要每道都补，一些比较丧病或者烦的题我暂时就跳过了吧QvQ，先把正常向的题补了。。</p>
<p><hr></p>
<h1 id="hdu_5327(1001)_Olympiad">hdu 5327(1001) Olympiad</h1><h2 id="Solution">Solution</h2><p>SB暴力题，暴力算就好</p>
<h2 id="Code"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/4/01.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5328(1002)_Problem_Killer">hdu 5328(1002) Problem Killer</h1><h2 id="Solution-1">Solution</h2><p>水题，等差等比$O(N)$扫的时候判断即可</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/4/02.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5329(1003)_Question_for_the_Leader">hdu 5329(1003) Question for the Leader</h1><h2 id="Solution-2">Solution</h2><p>简化问题，考虑把一棵树分成$k$块,这时一个显然的结论是如果有$k$个子树大小为$<br>\frac{n}{k}$的倍数，即可以分成$k$块。<br>考虑原问题，原题是一个基环加外向树，考虑不在环上的点$i$的$sz[i]$，显然可以直接计算。在基环上的点，不妨考虑断掉一条边后每个点为根的子树的$sz$,容易发现是一个前缀和的形式。然后我们对枚举的$k$取模，每次$O(N)$枚举在环上断掉哪条边即可。<br>复杂度$O(N\times logN)$</p>
<h2 id="Code-2"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/4/03.cpp" target="_blank" rel="external">Code</a></h2><p><hr>  </p>
<h1 id="hdu_5330(1004)_Route_Statistics">hdu 5330(1004) Route Statistics</h1><h2 id="Solution-3">Solution</h2><p>dp题，考虑$dp[S][k]$表示与$S$这个点距离为$k$的个数。($S$是一个长度为维度的$0,1,2$串)我们最后求出所有的$dp[S][k]$即可。<br>我们发现可以枚举中间某位不同，把那位分别替换为$0,1,2$三种情况来转移，简单dp一下即可</p>
<h2 id="Code-3"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/4/04.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5331(1005)_Simple_Problem">hdu 5331(1005) Simple Problem</h1><h2 id="Solution-4">Solution</h2><p>这个题其实并不Simple = =模型转换比较神，代码比较长，暂时没补，以后再说QvQ</p>
<p><hr></p>
<h1 id="hdu_5332(1006)_Test_for_Rikka">hdu 5332(1006) Test for Rikka</h1><h2 id="Solution-5">Solution</h2><p>这个一道比较有趣的题，$B=A^m,B[1][n]=k$很容易想到，我们相当于从$1$开始走$m$步到达n的方案数是k。<br>这样至少有个方向了。然后我们考虑特殊的图，完全图。<br>一个$n$个点的完全图，且每个点都直接与自己相连，走$x$步到达每个点的方案数都是$n^{x-1}$，然后怎么做呢。<br>我们很容易想到进制拆分，把$k$写成$\sum a[i]\times n^i$的形式，我们只需要搞出$a[i]$就可以了，我们可以把终点n拉出一条链，分别表示成对应$n$的$i$次方，然后不妨考虑完全图上有$a[i]$个点和链上连，这不就是$a[i]\times n^i$了么！至此，问题解决</p>
<h2 id="Code-4"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/4/06.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5333(1007)_Undirected_Graph">hdu 5333(1007) Undirected Graph</h1><h2 id="Solution-6">Solution</h2><p>LCT题，先跳过= =以后再补</p>
<p><hr></p>
<h1 id="hdu_5334(1008)_Virtual_Participation">hdu 5334(1008) Virtual Participation</h1><h2 id="Solution-7">Solution</h2><p>$k\le 10^5$时，全输出$1$即可<br>否则，不妨枚举有$i个1，j个2，k个3$，则，$i + j + k + i\times j + i\times k + j\times k=x$,枚举$i,j$即可，看上去复杂度非常高，其实满足条件的$i,j,k$不会特别大的</p>
<h2 id="Code-5"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/4/08.cpp" target="_blank" rel="external">Code</a></h2><hr>

<h1 id="hdu_5335(1009)_Walk_Out">hdu 5335(1009) Walk Out</h1><h2 id="Solution-8">Solution</h2><p>细节题，先一直沿着0走到距离终点最近的距离，把这些点加入队列。<br>之后显然可以贪心走，输出答案时要注意细节。我写的有点烦= =</p>
<h2 id="Code-6"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/4/09.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5336(1010)_XYZ_and_Drops">hdu 5336(1010) XYZ and Drops</h1><h2 id="Solution-9">Solution</h2><p>没什么好说的，大暴力就行，大水滴小水滴个数都不多，暴力复杂度完全可以接受</p>
<h2 id="Code-7"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/4/10.cpp" target="_blank" rel="external">Code</a></h2><hr>

<h1 id="hdu_5337(1011)_Yet_Another_XYZ_Problem">hdu 5337(1011) Yet Another XYZ Problem</h1><h2 id="Solution-10">Solution</h2><p>大型讨论题，先跳过= =</p>
<p><hr></p>
<h1 id="hdu_5338(1002)_ZZX_and_Permutations">hdu 5338(1002) ZZX and Permutations</h1><h2 id="Solution-11">Solution</h2><p>这题题意非常蛋疼，读懂了以后并不难做。<br>由于字典序要求最大，很容易想到贪心，不妨按位贪心，考虑第$1$位，查询$1$这个数的下一个数，不妨设为$A$，看之前的区间最大值$B$，如果$A$更大的话，标记$A$值使用过了，说明这个循环节可以用后面的替换。如果$B$更大，说明当前位置到$B$之间是一段连续的区间，确定下来了，然后把区间位置插入一个set里，表示这段区间已确定。就搞定了</p>
<h2 id="Code-8"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/4/12.cpp" target="_blank" rel="external">Code</a></h2><p>完结撒花！<br>继续补题！&gt;_&lt;</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash"]]>
    </summary>
    
      <category term="hdu" scheme="http://mlz000.github.io/categories/hdu/"/>
    
      <category term="ACM多校题解" scheme="http://mlz000.github.io/categories/hdu/ACM%E5%A4%9A%E6%A0%A1%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015-ACM多校训练第三场]]></title>
    <link href="http://mlz000.github.io/2015/09/01/2015-ACM%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E7%AC%AC%E4%B8%89%E5%9C%BA/"/>
    <id>http://mlz000.github.io/2015/09/01/2015-ACM多校训练第三场/</id>
    <published>2015-09-01T13:03:28.000Z</published>
    <updated>2015-09-14T13:03:03.942Z</updated>
    <content type="html"><![CDATA[<p><embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" width="235" height="346" wmode="opaque"></p>
<h1 id="题外话">题外话</h1><p>尼玛颓废着颓废着就开学了= =无聊终于把第三场的题全补完了</p>
<p><hr></p>
<h1 id="hdu_5316(1001)_Magician">hdu 5316(1001) Magician</h1><h2 id="Solution">Solution</h2><p>线段树裸题，维护四个东西，以奇/偶开头奇/偶结尾的最大值，正常线段树合并即可。</p>
<h2 id="Code"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/3/01.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5317(1002)_RGCDQ">hdu 5317(1002) RGCDQ</h1><h2 id="Solution-1">Solution</h2><p>水题，发现$2\times 3\times 5\times 7\times 9\times 11\times 13 \times17&gt;1000000$，所以素因子种数最多为7个，前缀和统计一下即可</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/3/02.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h2 id="hdu_5318(1003)_The_Goddess_Of_The_Moon">hdu 5318(1003) The Goddess Of The Moon</h2><h2 id="Solution-2">Solution</h2><p>水题，题目太长比赛没看= =，唯一的坑是要把数字去重，然后容易看出可以用矩阵乘法来递推</p>
<h2 id="Code-2"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/3/03.cpp" target="_blank" rel="external">Code</a></h2><p><hr>  </p>
<h1 id="hdu_5319(1004)_Painter">hdu 5319(1004) Painter</h1><h2 id="Solution-3">Solution</h2><p>简单模拟题，按题目要求一刷刷到底就可以了</p>
<h2 id="Code-3"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/3/04.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5320(1005)_Fan_Li">hdu 5320(1005) Fan Li</h1><h2 id="Solution-4">Solution</h2><p>感觉这道题是个不错题，考虑以$i$为开头的序列，$gcd$如果发生变化一定至少除以$2$，所以不同的gcd区间最多也是log级的。可以预处理出所有的四元组$(g,i,l,r)$，表示以$i$为开头，结尾在$[l,r]$区间内$gcd$为$g$。<br>考虑$dp$，不妨考虑当前$gcd=x$的方案数以及区间数，假设该四元组开头为$i$,显然区间数是以结尾在$[1,i-1]$区间内的最大值$+1$，方案数也很好计算。容易发现用一个线段树就可以轻松维护了。</p>
<h2 id="Code-4"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/3/05.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5321(1006)_Beautiful_Set">hdu 5321(1006) Beautiful Set</h1><h1 id="Description">Description</h1><p>A的计算方法是：对于$n$个数的某个排列，此排列的美丽值为这个排列所有的区间最大公约数之和。然后这个集合的美丽值为$n$个数的所有排列的美丽值之和。<br>B的计算方法是：在$n$个数中选出$k(1 \le k \le n)$个数，对于某种选取方案，这种方案的美丽值为$k$个数的最大公约数乘上$k$。然后这个集合的美丽值为所有选数方案的美丽值之和。</p>
<h2 id="Solution-5">Solution</h2><p>很容易想到用$cnt[i]$表示集合中$i$的倍数个数</p>
<ul>
<li>考虑第一个人<br>$F1[x]$表示$gcd$为$x$的倍数的区间的个数<br>$f1[x]$表示$gcd$为$x$的区间的个数<br>$F1[x]=\sum_{x|d}f1[d]$</li>
</ul>
<p>且$F1[x]=\sum_{j=1}^{cnt[x]} \binom{cnt[x]}{j}\times j! \times (n-j+1)!$<br>从$cnt[x]$里选$j$个数，再把$n-j$个数和这$j$个数算做$n-j+1$的排列</p>
<ul>
<li>考虑第二个人<br>$F2[x]$表示$gcd$为$x$的倍数的区间的个数<br>$f2[x]$表示$gcd$为$x$的区间的个数<br>易知$F2[x] = \sum_{x|d}f2[d]$</li>
</ul>
<p>且$F2[x]= \sum_{j=1}^{cnt[x]} \binom{cnt[x]}{j}\times j = cnt[x]\times 2^{cnt[x]-1}$<br>这个稍微推推就能推出来</p>
<p>同样的$F2[x] = \sum_{x|d}f2[d]$</p>
<p>然后就是我们熟悉的莫比乌斯反演辣！</p>
<p>$F(n)=\sum_{n|d}f(d)$</p>
<p>可以得到</p>
<p>$f[n]=\sum_{n|d}\mu(d/n)\times F(d)$</p>
<p>于是可以计算出$f$，$\sum f[i]\times i$即是答案</p>
<h2 id="Code-5"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/3/06.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5322(1007)_Hope">hdu 5322(1007) Hope</h1><h2 id="Solution-6">Solution</h2><p>这题其实并不难，考虑$dp[i]$为长度为$i$的排列的答案，枚举这个排列最大值所在的位置，最大值左边和它都是联通的，于是我们可以得到转移方程<br>$dp[i]=\sum_{j=1}^i \binom{i-1}{j-1}\times (j-1)!\times dp[i-j]\times j^2$</p>
<p>稍加变换我们可以得到</p>
<p>$dp[i]=(i-1)!\times \sum_{j=1}^i \frac{j^2}{(i-j)!}\times dp[i-j]$</p>
<p>令$k=i-j$我们可以得到$dp[i]=(i-1)!\times \sum_{k=0}^{i-1}\frac{(i-k)^2}{k!}\times dp[k]$<br>展开得$dp[i]=(i-1)!\times (i^2-2ik+k^2)\times \frac{dp[k]}{k!}$<br>维护三个前缀和即可O(N)解决，当然你可以没思维难度得想到cdq分治+NTT得做法QAQ</p>
<h2 id="Code-6"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/3/07.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5323(1008)_Solve_this_interesting_problem">hdu 5323(1008) Solve this interesting problem</h1><h2 id="Solution-7">Solution</h2><p>考虑$[l,r]$是做左儿子还是右儿子，具体有$4$种情况，暴力枚举即可，实际上的复杂度是$4^{11}$，完全可以接受</p>
<h2 id="Code-7"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/3/08.cpp" target="_blank" rel="external">Code</a></h2><hr>

<h1 id="hdu_5324(1009)_Boring_Class">hdu 5324(1009) Boring Class</h1><h2 id="Solution-8">Solution</h2><p>三维最长不下降序列之类的题，很容易想到按$id$算答案，$r$这一维排序，$l$这一维用树状数组维护然后cdq分治的经典做法。<br>考虑$dp$由于要字典序最小，先cdq分治算右区间的答案，考虑对左区间的影响即可。<br>写了不到$80$行，轻松愉快，cdq分治真是个高大的姿势。。。爽</p>
<h2 id="Code-8"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/3/09.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5325(1010)_Crazy_Bobo">hdu 5325(1010) Crazy Bobo</h1><h2 id="Solution-9">Solution</h2><p>水题，按权值排序后，权值小的向大的连即可，dp一下就行了</p>
<h2 id="Code-9"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/3/10.cpp" target="_blank" rel="external">Code</a></h2><hr>

<h1 id="hdu_5326(1011)_Work">hdu 5326(1011) Work</h1><h2 id="Solution-10">Solution</h2><p>水题，随便dfs就行了= =</p>
<h2 id="Code-10"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/3/11.cpp" target="_blank" rel="external">Code</a></h2><p>完结撒花！<br>继续补题！&gt;_&lt;</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash"]]>
    </summary>
    
      <category term="hdu" scheme="http://mlz000.github.io/categories/hdu/"/>
    
      <category term="ACM多校题解" scheme="http://mlz000.github.io/categories/hdu/ACM%E5%A4%9A%E6%A0%A1%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015 ACM多校训练第二场]]></title>
    <link href="http://mlz000.github.io/2015/08/17/2015-ACM%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E7%AC%AC%E4%BA%8C%E5%9C%BA/"/>
    <id>http://mlz000.github.io/2015/08/17/2015-ACM多校训练第二场/</id>
    <published>2015-08-17T04:56:18.000Z</published>
    <updated>2015-08-17T05:52:44.776Z</updated>
    <content type="html"><![CDATA[<h1 id="题外话">题外话</h1><p>颓废了一万年终于把第二场的题补完了，除了丧病的第一题。。</p>
<p><hr></p>
<h1 id="hdu_5301(1002)_Buildings">hdu 5301(1002) Buildings</h1><h2 id="Solution">Solution</h2><p>水题，仔细讨论各种情况即可</p>
<h2 id="Code"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/2/02.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5302(1003)_Connect_the_Graph">hdu 5302(1003) Connect the Graph</h1><h2 id="Solution-1">Solution</h2><p>构造题，比赛时没看，赛后发现挺水的。由于连接黑边白边只有$0,1,2$三种情况，0我们就不管了。<br>不妨想考虑白色边，$1,2$的情况我们只需要先构造一个长链，解决$2个1和所有2$，然后再把1的搞出来。然后为了防止重边，做黑色边的时候有同样的方法，连边时隔着一个点连即可。</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/2/03.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h2 id="hdu_5303(1004)_Delicious_Apples">hdu 5303(1004) Delicious Apples</h2><h2 id="Solution-2">Solution</h2><p>贪心的好题，有两种情况，一种是都从两个半边取，另外一种是从一边开始取回去后，绕后另外一个半边取。但是注意到环最多肯定是只绕一次的，如果绕两次我们明显可以只绕一次，然后再走一个半边。显然更优。<br>预处理的时候把所有苹果按位置排序，dp一下即可。</p>
<h2 id="Code-2"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/2/04.cpp" target="_blank" rel="external">Code</a></h2><p><hr>  </p>
<h1 id="hdu_5304(1005)_Eastest_Magical_Day_Seep_Group’s_Summer">hdu 5304(1005) Eastest Magical Day Seep Group’s Summer</h1><h2 id="Solution-3">Solution</h2><p>好题，删掉$m-n$条边后剩下$n$条边，可以看出是一个树上有一个环，看到数据范围很容易想到枚举环上点的集合。然后剩下的便是生成树计数问题，可以用Matrix-tree定理解决。<br>那么如何求点集为$S$的环的个数呢，考虑状压Dp，枚举环上最小点的标号，令$dp[i][j]$为当前点集为$i$，终点为$j$的方案数，简单dp即可。最后答案要除以$2$，因为每个环两个方向都算了一遍。而且注意到长度为1的环是不算的。<br>复杂度$O(2^n \times n^3)$</p>
<h2 id="Code-3"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/2/05.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5305(1006)_Friends">hdu 5305(1006) Friends</h1><h2 id="Solution-4">Solution</h2><p>水题，随便搜搜就过了= =</p>
<h2 id="Code-4"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/2/06.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5306(1007)_Gorgeous_Sequence">hdu 5306(1007) Gorgeous Sequence</h1><h2 id="Solution-5">Solution</h2><p>神题，主要考察复杂度的分析= =然而我并没怎么理解QAQ。。。<br>打了和正常线段树一样的标记tag，另外记录了一个cov标记，表示该节点下多少个叶子节点被控制，还维护了mx,表示最大值。每次修改的时候，不直接修改，先dfs到叶子节点，清一下之前的标记，然后再返回来修改该节点。sum更改时只要增加tag值控制的节点的sum即可。<br>感觉非常的玄幻= =太神了。。。蒟蒻不太理解QAQ</p>
<h2 id="Code-5"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/2/07.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5307(1008)_He_is_Flying">hdu 5307(1008) He is Flying</h1><h2 id="Solution-6">Solution</h2><p>比赛时没怎么想，赛后发现并不难。<br>首先容易想到用$s[i]$表示前$i$段的和，答案是$\sum (j-i+1)x^{s[j]-s[i-1]}$，最后$x$的次数为$k$的就是对于长度为$k$的答案。<br>变化一下形式得$\sum j\times x^{s[j]}- \sum (i-1)\times x^{s[j]-s[i-1]}$，再拆一下得到$\sum j\times x^{s[j]}\times \sum x^{s[i-1]}-\sum x^{s[j]}\times \sum (i-1)\times x^{s[i-1]}$。<br>这样熟悉FFT的同学马上就会发现这是个卷积的形式，FFT直接搞就可以了。由于精度问题，可以选择大质数的NTT，或者两个int型的NTT再中国剩余定理合并。实测选取大质数NTT会更快一些。</p>
<h2 id="Code-6"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/2/08.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5308(1009)_I_Wanna_Become_A_24-Point_Master">hdu 5308(1009) I Wanna Become A 24-Point Master</h1><h2 id="Solution-7">Solution</h2><p>24点= =水题，就是麻烦。。。<br>我的做法是分为$n是否大于等于12$，如果$n\ge 12$，那么显然可以搞出$2\times 3\times 4$这种形式，分奇偶不同处理一下即可。比如多的一些数是$4$，那就不停的乘4除以4即可。<br>$n&lt;12$时，手算即可。</p>
<h2 id="Code-7"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/2/09.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5309(1010)_JRY_is_Fighting">hdu 5309(1010) JRY is Fighting</h1><h2 id="Solution-8">Solution</h2><p>这题看了鸟神的题解一直没看懂= =。。最后问了他才搞明白。。感谢鸟神。<br>很容易想到二分答案，如何验证是个问题。首先预处理出一个数组$r$，$r[i]$表示在第$i$秒嗑药后能挺到第几秒。然后我们二分答案再验证，如何验证是核心。<br>考虑下面check长度为x的代码，建议和输出答案的$nxt$数组一起考虑。<br>我们将点转换为区间考虑，$d[i]$表示$i$到终点的嗑药次数，如果$d[i]&gt;d[i+1]$表示$i$这一时刻要嗑药，然后我们分了三种情况考虑</p>
<ul>
<li>(1)$r[i]&gt;n$表示这个点可以直接到终点，显然我们可以再这点嗑药</li>
<li>(2)$r[i]-i&lt;x$，这个点显然不能嗑药，因为间隔$&lt;x$</li>
<li>(3)否则$r[i]+1&gt;i+x$,如果最近的间隔到了$i+l$这一时刻可以到达最后的终点($d[i+x]&gt;d[r[i]+1]$)，显然我们这第$i$时刻可以嗑药。</li>
</ul>
<p>同时由于我们要求字典序最小，显然如果能取前面的就尽量取前面的,这个$d$数组挺难理解的，不知道我自己理解的是否透彻QAQ，可以把$d$数组看做后面整个区间的一个最值，从后往前推时$d$值不降，呈阶梯状，变化时表示可以嗑药。注意到第一次嗑药时没限制的，最后特殊判断一下即可。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    d[n] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (r[i] &gt; n)   d[i] = d[i + <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (r[i] - i &lt; x)  d[i] = d[i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span>    d[i] = d[i + <span class="number">1</span>] + (d[i + x] &gt; d[r[i] + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d[<span class="number">1</span>] &gt; d[r[<span class="number">0</span>] + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) </span><br><span class="line">            nxt[i] = d[i] &gt; d[i + <span class="number">1</span>] ? i : nxt[i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> x = nxt[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (x) &#123;</span><br><span class="line">            s[top++] = x;</span><br><span class="line">            <span class="keyword">if</span> (r[x] &gt; n)   <span class="keyword">break</span>;</span><br><span class="line">            x = nxt[x + ans];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Code-8"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/2/10.cpp" target="_blank" rel="external">Code</a></h2><p>完结撒花！<br>继续补题！&gt;_&lt;</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="题外话">题外话</h1><p>颓废了一万年终于把第二场的题补完了，除了丧病的第一题。。</p>
<p><hr></p>
<h1 id="hdu_5301(1002)_Buildings">hdu 5301(1002) Buildings</h1><h2 id="]]>
    </summary>
    
      <category term="hdu" scheme="http://mlz000.github.io/categories/hdu/"/>
    
      <category term="ACM多校题解" scheme="http://mlz000.github.io/categories/hdu/ACM%E5%A4%9A%E6%A0%A1%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015 ACM多校训练第一场]]></title>
    <link href="http://mlz000.github.io/2015/08/07/2015-ACM%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E7%AC%AC%E4%B8%80%E5%9C%BA/"/>
    <id>http://mlz000.github.io/2015/08/07/2015-ACM多校训练第一场/</id>
    <published>2015-08-07T12:56:18.000Z</published>
    <updated>2015-08-07T15:19:49.233Z</updated>
    <content type="html"><![CDATA[<h1 id="题外话">题外话</h1><p>这个暑假以前就决定要把这次多校的所有题全补了，中间断断续续，总算把第一场的题补全了，鄙视一下颓废的自己。。。</p>
<p><hr></p>
<h1 id="hdu_5288(1001)_OO’s_Sequence">hdu 5288(1001) OO’s Sequence</h1><h2 id="Solution">Solution</h2><p>水题，定义两个数组$L[i], R[i]$示第i个数左侧和右侧最接近它且值是a[i]因子的数字的位置，统计贡献即可。由于a[i]范围很小，因子数很小，暴力统计更新l,r即可。</p>
<h2 id="Code"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/1/01.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5289(1002)_Assignment">hdu 5289(1002) Assignment</h1><h2 id="Solution-1">Solution</h2><p>水题，很容易想到先用st表预处理区间最大最小值，然后枚举左端点，二分右端点检查是否满足即可。复杂度$O(NlogN)$，也可以用单调队列维护最值</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/1/02.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h2 id="hdu_5290(1003)_Bombing_plan">hdu 5290(1003) Bombing plan</h2><h2 id="Solution-2">Solution</h2><p>这题比赛时候没时间看，其实赛后发现并不是很难。看数据范围很容易往O(NW)上去想。于是不难想到dp<br>定义两个数组<br>$f[i][j]$表示以i为根的子树全部破坏掉，还能向上破坏最多j的距离，需要的最少点数<br>$g[i][j]$表示以i为根的子树未被全部破坏掉，且未被破坏的点距离i最远为j，需要的最少点数</p>
<ul>
<li><p>(1)不取i点,则<br>  $$f[i][j]=f[son][j+1]+\sum_{l是i的其他孩子} min(f[l][0],f[l][1],…,f[l][j+1],g[l][0],g[l][1],…,g[l][j-1])$$</p>
<p>  $$g[i][j]=g[son][j-1]+\sum_{l是i的其他孩子} min(f[l][0],f[l][1],…,f[l][j],g[l][0],g[l][1],…,g[l][j-1])$$</p>
</li>
<li>(2)取i点则<br>  $$f[i][w[i]]=1+\sum_{l是i的孩子} min(f[l][0],f[l][1],…,f[l][w[i]+1],g[l][0],g[l][1],…,g[l][w[i]-1])$$<br>很容易想到用两个数组$ff,gg$分别维护$f,g$的最小值，复杂度$O(NW)$，具体实现的时候注意下边界$0$的情况即可。仔细想想，转移方程还是比较容易得到的</li>
</ul>
<h2 id="Code-2"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/1/03.cpp" target="_blank" rel="external">Code</a></h2><p><hr>  </p>
<h1 id="hdu_5291(1004)_Candy_Distribution">hdu 5291(1004) Candy Distribution</h1><h2 id="Solution-3">Solution</h2><p>考虑最暴力的dp,$dp[i][j]表示分配完第i种物品，A比B多j个的方案数$，然后dp转移的时候枚举分给A$x$个，B$y$个，则$dp[i][j+x-y]+=dp[i-1][j]$。考虑第$i$种物品有$s$个，$x+y\le s$时可转移，则$dp[i-1][j]$对$dp[i][j]$的贡献有$\frac{s}{2}+1$次($x=y=0…x=y=\frac{s}{2}$),下发现，j每变化2,贡献-1。奇偶两种情况考虑时，这个东西类似于等差数列，差分两次后我们就可以完成递推了。复杂度$O(n^3)$</p>
<h2 id="Code-3"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/1/04.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5292(1005)_Pocket_Cube">hdu 5292(1005) Pocket Cube</h1><h2 id="Solution-4">Solution</h2><p>这个题就是个找规律的题，看了题解才会做QAQ。。。<br><img src="http://i1.tietuku.com/a1c7349922a9e0de.jpg" alt=""></p>
<h2 id="Code-4"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/1/05.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5293(1006)_Tree_chain_problem">hdu 5293(1006) Tree chain problem</h1><h2 id="Solution-5">Solution</h2><p>比赛时没看，赛后发现是个很裸的题= =。<br>考虑dp，$dp[i]$表示以$i$为根的子树的最优值，则<br>$sum[i]=\sum_{j\in son[i]} dp[j]$<br>容易想到有两种转移</p>
<ul>
<li>(1) $dp[i]=sum[i]$</li>
<li>(2) $dp[i]=value[p]+\sum sum[k]-\sum dp[k]$ $(链p的lca是i,k是链上的节点)$<br>链上求和很容易想到树链剖分，复杂度$O(Nlog^2N)$</li>
</ul>
<h2 id="Code-5"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/1/06.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5294(1007)_Tricks_Device">hdu 5294(1007) Tricks Device</h1><h2 id="Solution-6">Solution</h2><p>水题，最短路寻找道路边数最少的最短路,总边数减去最少条数为第二个问答案。<br>把最短路图抽出来建流量为1的边，最小割即为第一问答案。</p>
<h2 id="Code-6"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/1/07.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5295(1008)_Unstable">hdu 5295(1008) Unstable</h1><h2 id="Solution-7">Solution</h2><p><img src="http://i3.tietuku.com/3d848fc23b742532.jpg" alt=""><br>平几题，给出中点很容易想到倍长的事情。如图，倍长$AF$，做$BG$平行于$AD$且$|BG|=|AD|$，容易看出三角形$FDA$和三角形$FCA’全等$<br>不妨固定BC,$A’$可以通过以$C$圆心，半径长为$da$，和以$B$为圆心，半径长为$2ef$的圆交点得到。<br>由于$A’GBC$是平行四边形，可以得到G的坐标。于是$D$的坐标可以通过以$C$为圆心，半径长为$cd$，和以$G$为圆心，半径长为$DG$(即$ab$)的圆得到。于是可以得到$A$的坐标</p>
<h2 id="Code-7"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/1/08.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5296(1009)_Annoying_problem">hdu 5296(1009) Annoying problem</h1><h2 id="Solution-8">Solution</h2><p>比赛时自己蠢一直没想出来，想过dfs序但没细想= =<br>其实每次插入的时候找两个dfs序最接近的点$x,y$一个大于$u$一个小于$u$即可。每次增加的花费是$dis[u]-dis[lca(x,u)]-dis[lca(y,u)]+dis[lca(x,y)]$，即为$u$到$x-y$链上的距离。删除时类似。<br>找不到这样的点时直接取最大和最小dfs序的两个点即可<br>为什么这样呢，给定固定点把它们连通得到的树一定是固定的。这样选点的目的是为了不让边重复。</p>
<h2 id="Code-8"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/1/09.cpp" target="_blank" rel="external">Code</a></h2><h1 id="hdu_5297(1010)_Y_sequence">hdu 5297(1010) Y sequence</h1><h2 id="Solution-9">Solution</h2><p>这个题比赛时我写的二分，一直T，= =非常蛋疼。赛后看题解和问别人才知道，可以迭代，迭代次数不会太多。<br>首先考虑反函数$f(x)$表示前$x$个数中Y-sequence的数量。我们迭代来算这个值，不用二分。<br>我们要求第$n$个Y-sequence，开始令$x=n$，如果$f(x)=now$，那么前$x$个数中有$n-now$个不是Y-sequence的数，那么我们令$x=x+n-now$，看看新的$f(x)$是否等于n即可。<br>我们每次只加了缺少的答案数，所以不可能超过正确答案。<br>迭代还是玄学啊。。。。新姿势get</p>
<h2 id="Code-9"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/1/10.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5298(1011)_Solid_Geometry_Homework">hdu 5298(1011) Solid Geometry Homework</h1><h2 id="Solution-10">Solution</h2><p>比赛时以为是大型计算几何看都没看，赛后发现这是个SB题，把点带到平面和球面方程中，确定点在哪一边把结果异或一下考虑染色即可。</p>
<h2 id="Code-10"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/1/11.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5299(1012)_Circles_Game">hdu 5299(1012) Circles Game</h1><h2 id="Solution-11">Solution</h2><p>自己太弱，不会扫描线，赛后补了下姿势。。<br>很容易想到扫描线处理圆，把圆变成树，然后就变成了经典博弈问题树上删边问题，具体可以看09年国家集训队论文&lt;&lt;组合游戏略述——浅谈SG游戏的若干拓展及变形&gt;&gt;。<br>结论是叶子节点$sg值为0$其余节点$sg$值为所以孩子节点$sg$值$+1$的异或和。</p>
<h2 id="Code-11"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/1/12.cpp" target="_blank" rel="external">Code</a></h2><p>完结撒花！<br>继续补题！&gt;_&lt;</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="题外话">题外话</h1><p>这个暑假以前就决定要把这次多校的所有题全补了，中间断断续续，总算把第一场的题补全了，鄙视一下颓废的自己。。。</p>
<p><hr></p>
<h1 id="hdu_5288(1001)_OO’s_Sequence">hdu 528]]>
    </summary>
    
      <category term="hdu" scheme="http://mlz000.github.io/categories/hdu/"/>
    
      <category term="ACM多校题解" scheme="http://mlz000.github.io/categories/hdu/ACM%E5%A4%9A%E6%A0%A1%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[srm 542]]></title>
    <link href="http://mlz000.github.io/2015/07/20/srm-542/"/>
    <id>http://mlz000.github.io/2015/07/20/srm-542/</id>
    <published>2015-07-20T12:05:42.000Z</published>
    <updated>2015-07-20T12:57:29.948Z</updated>
    <content type="html"><![CDATA[<h1 id="250">250</h1><p><hr></p>
<h2 id="Description">Description</h2><p>从矩形地图中选三个点，使得A-B,B-C,C-A的曼哈顿距离和在给定的一个范围内，求多少种选法。$X,Y\le 3000$</p>
<h2 id="Solution">Solution</h2><p>水题，很容易发现曼哈顿距离和是一个矩形的周长，枚举长和宽统计即可。</p>
<h2 id="Code"><a href="https://github.com/mlz000/topcoder/blob/master/srm542/250.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5000</span>;</span><br><span class="line"><span class="keyword">struct</span> PatrolRoute &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countRoutes</span><span class="params">(<span class="keyword">int</span> X, <span class="keyword">int</span> Y, <span class="keyword">int</span> minT, <span class="keyword">int</span> maxT)</span> </span>&#123;</span><br><span class="line">		LL ans = <span class="number">0</span>;</span><br><span class="line">  		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; X; ++i)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; Y; ++j) &#123;</span><br><span class="line">				<span class="keyword">if</span> ((i + j) * <span class="number">2</span> &gt;= minT &amp;&amp; (i + j) * <span class="number">2</span> &lt;= maxT) &#123;</span><br><span class="line">					ans += <span class="number">1l</span>l * (X - i) * (Y - j) % M * (i - <span class="number">1</span>) % M * (j - <span class="number">1</span>) % M;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">return</span> ans * <span class="number">6</span> % M;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="500">500</h1><p><hr></p>
<h2 id="Description-1">Description</h2><p>给出$n$个长度都为$m$的字符串。$n\le 16, m\le 50$，任两个字符串之间的大小关系由一个随即产生的排列来决定。即，如果比较至第$i$位，则去比较$pa_i$和$pb_i$的大小关系，从而确定字符串的大小关系。问$words_i$排完序后是最小串的概率。</p>
<h2 id="Solution-1">Solution</h2><p>感觉这题很难QAQ，首先n=16可以想到状压Dp，但是状态很难想，看了别人的题解才会做。。<br>$dp[i][mask]$表示当前状态是$mask$，第$i$个人是最小串的概率，$mask$为i的位置表示该串已被选择。在统计第$i$个串的概率时同时记录每位字母对应比该串小的和相等的状态。分别用$small[j]$和$same[j]$存二进制状态。<br>当$small[j] \&amp; mask &gt; 0$时，显然不可以转移，当$same[j] \&amp; mask=mask$时，转移没什么意义，否则$dp[i][mask] += dp[i][same[j] \&amp; mask]$</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/topcoder/blob/master/srm542/500.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//状压Dp</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">int</span> small[<span class="number">51</span>], same[<span class="number">51</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; ans; </span><br><span class="line"><span class="keyword">double</span> dp[N][<span class="number">1</span> &lt;&lt; N];</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">gao</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> mask, <span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (dp[x][mask] != -<span class="number">1.0</span>)	<span class="keyword">return</span> dp[x][mask];</span><br><span class="line">	<span class="keyword">double</span> &amp;t = dp[x][mask];</span><br><span class="line">	<span class="keyword">if</span> (mask == (<span class="number">1</span> &lt;&lt; x))	<span class="keyword">return</span> t = <span class="number">1.0</span>;</span><br><span class="line">	t = <span class="number">0.0</span>;</span><br><span class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> ((small[i] &amp; mask) &gt; <span class="number">0</span>)	++cnt;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> ((same[i] &amp; mask) != mask)	++cnt, t += gao(x, mask &amp; same[i], l);</span><br><span class="line">	&#125;</span><br><span class="line">	t /= cnt;</span><br><span class="line">	<span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> StrangeDictionary2 &#123;</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="keyword">double</span>&gt; getProbabilities(<span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; words) &#123;</span><br><span class="line">  		<span class="keyword">int</span> n = words.size(), l = words[<span class="number">0</span>].size();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span> &lt;&lt; n; ++j)</span><br><span class="line">				dp[i][j] = -<span class="number">1.0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			<span class="built_in">memset</span>(small, <span class="number">0</span>, <span class="keyword">sizeof</span>(small));</span><br><span class="line">			<span class="built_in">memset</span>(same, <span class="number">0</span>, <span class="keyword">sizeof</span>(same));</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; l; ++k)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">					<span class="keyword">if</span> (words[j][k] &lt; words[i][k])	small[k] |= <span class="number">1</span> &lt;&lt; j;</span><br><span class="line">					<span class="keyword">else</span> <span class="keyword">if</span> (words[j][k] == words[i][k])	same[k] |= <span class="number">1</span> &lt;&lt; j;</span><br><span class="line">				&#125;</span><br><span class="line">			ans.pb(gao(i, (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>, l));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="250">250</h1><p><hr></p>
<h2 id="Description">Description</h2><p>从矩形地图中选三个点，使得A-B,B-C,C-A的曼哈顿距离和在给定的一个范围内，求多少种选法。$X,Y\le 3000$</p>
<]]>
    </summary>
    
      <category term="topcoder题解" scheme="http://mlz000.github.io/categories/topcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[srm 541]]></title>
    <link href="http://mlz000.github.io/2015/07/19/srm-541/"/>
    <id>http://mlz000.github.io/2015/07/19/srm-541/</id>
    <published>2015-07-19T07:28:33.000Z</published>
    <updated>2015-07-19T07:46:46.716Z</updated>
    <content type="html"><![CDATA[<h1 id="250">250</h1><p><hr></p>
<h2 id="Solution">Solution</h2><p>水题，最暴力的方法枚举即可</p>
<h2 id="Code"><a href="https://github.com/mlz000/topcoder/blob/master/srm541/250.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="keyword">int</span> dx[] = &#123;<span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">55</span>;</span><br><span class="line"><span class="keyword">int</span> f[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="keyword">struct</span> AntsMeet &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countAnts</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; x, <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; y, <span class="built_in">string</span> direction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = x.size();</span><br><span class="line">        s[<span class="string">'N'</span>] = <span class="number">0</span>, s[<span class="string">'E'</span>] = <span class="number">1</span>, s[<span class="string">'W'</span>] = <span class="number">2</span>, s[<span class="string">'S'</span>] = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) x[i] &lt;&lt;= <span class="number">1</span>, y[i] &lt;&lt;= <span class="number">1</span>, f[i] = s[direction[i]], vis[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4001</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                <span class="keyword">if</span> (vis[j]) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt; n; ++k)</span><br><span class="line">                        <span class="keyword">if</span> (vis[k]) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (x[j] == x[k] &amp;&amp; y[j] == y[k])   vis[j] = vis[k] = <span class="number">0</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                <span class="keyword">if</span> (vis[j]) &#123;</span><br><span class="line">                    x[j] += dx[f[j]];</span><br><span class="line">                    y[j] += dy[f[j]];</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) </span><br><span class="line">            <span class="keyword">if</span> (vis[i]) ++ans;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="550">550</h1><p><hr></p>
<h2 id="Description">Description</h2><p>给出串$A,B,C,S,F$和整数$k$。以及函数$f(x) = A+x+B+x+C$。求$f^k(x)$中以F为子串，出现了多少次。答案mod $10^{9}+7$。串的长度$\le 50$, $k\le 10^7$</p>
<h2 id="Solution-1">Solution</h2><p>注意到串长度$\le 50$,以及$k\le 10^7$，而且出现F的情况分为在A，B，C三个串中分别出现，以及在交界处出现。由于串的长度比较小，所以我们暴力50次以后，交界处包含F的次数就不再变化了（想一想，为什么）。于是后面的情况我们每次$ans = ans \times 2 + t$即可。。$t$是交界处的答案，$ans$是$A,B,C$中的答案。</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/topcoder/blob/master/srm541/550.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">struct</span> AkariDaisukiDiv1 &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">gao</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s, <span class="keyword">const</span> <span class="built_in">string</span> &amp;t, <span class="keyword">int</span> l = 0, <span class="keyword">int</span> r = 100000000)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt; s.size() - t.size() + <span class="number">1</span> &amp;&amp; i &lt; r; ++i)</span><br><span class="line">            <span class="keyword">if</span> (s.substr(i, t.size()) == t) ++tmp;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countF</span><span class="params">(<span class="built_in">string</span> A, <span class="built_in">string</span> B, <span class="built_in">string</span> C, <span class="built_in">string</span> S, <span class="built_in">string</span> F, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; cnt &lt; k &amp;&amp; S.size() &lt; F.size(); ++cnt)   S = A + S + B + S + C;</span><br><span class="line">        <span class="keyword">if</span> (S.size() &lt; F.size())    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = gao(S, F), t = <span class="number">0</span>; </span><br><span class="line">        <span class="built_in">string</span> p = S.substr(<span class="number">0</span>, F.size()), q = S.substr(S.size() - F.size(), F.size());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; cnt &lt; k &amp;&amp; i &lt; <span class="number">50</span>; ++cnt, ++i) &#123;</span><br><span class="line">            t = gao(A + p, F, <span class="number">0</span>, A.size()) + gao(q + B + p, F, <span class="number">1</span>, F.size() + B.size()) + gao(q + C, F, <span class="number">1</span>);</span><br><span class="line">            ans = (ans + ans + t) % M;</span><br><span class="line">            p = (A + p).substr(<span class="number">0</span>, F.size()), q = (q + C).substr((q + C).size() - F.size(), F.size());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (; cnt &lt; k; ++cnt)  ans = (ans + ans + t) % M;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="250">250</h1><p><hr></p>
<h2 id="Solution">Solution</h2><p>水题，最暴力的方法枚举即可</p>
<h2 id="Code"><a href="https://github.com/mlz000/topcod]]>
    </summary>
    
      <category term="topcoder题解" scheme="http://mlz000.github.io/categories/topcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[srm 540]]></title>
    <link href="http://mlz000.github.io/2015/07/16/srm-540/"/>
    <id>http://mlz000.github.io/2015/07/16/srm-540/</id>
    <published>2015-07-16T13:21:32.000Z</published>
    <updated>2015-07-16T13:43:15.039Z</updated>
    <content type="html"><![CDATA[<p>topcoder, srm 540题解<br><a id="more"></a></p>
<h1 id="250">250</h1><h2 id="Description:">Description:</h2><p>给定 一个数组B，和一个”+-“组成的字符数组，求有多少种A数组。<br>B数组是由A数组相邻的两个数和符号运算后的结果。</p>
<h2 id="Solution">Solution</h2><p>显然如果第一个数固定，整个A数组就固定下来了，所以就是求第一个数有多少种可能。我们发现给定的是$A_1+x_2，A_2-A_3…$这种形式。于是我们可以通过连续的运算得到$A_1$和其他$A_i$的关系，取上下界即可。</p>
<h2 id="Code"><a href="https://github.com/mlz000/topcoder/blob/master/srm540/250.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="built_in">vector</span>&lt;LL&gt; B(<span class="number">51</span>);</span><br><span class="line"><span class="keyword">struct</span> ImportantSequence &#123;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; b, <span class="built_in">string</span> operators)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> n = b.size();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)	B[i] = b[i];</span><br><span class="line">		LL L = <span class="number">1</span>, R = <span class="number">1e18</span>, now = -<span class="number">1</span>, last = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			<span class="keyword">if</span> (now == <span class="number">1</span>)	B[i] = last - B[i];</span><br><span class="line">			<span class="keyword">else</span> B[i] += last;</span><br><span class="line">			now = (now == <span class="number">1</span>) ? (operators[i] == <span class="string">'+'</span> ? -<span class="number">1</span> : <span class="number">1</span>) : (operators[i] == <span class="string">'+'</span> ? <span class="number">1</span> : -<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span> (now == <span class="number">1</span>)	R = min(R, (LL)B[i] - <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">else</span> L = max(L, (LL)B[i] + <span class="number">1</span>);</span><br><span class="line">			last = B[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> L &gt; R ? <span class="number">0</span> : R - L &gt; <span class="number">2e9</span> ? -<span class="number">1</span> : R - L + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="550">550</h1><h2 id="Description">Description</h2><p>$N$ 个栅栏按照标号$0,1,…,N-1$围成一个圈，从$0$号栅栏开始染色。每一种颜色用$（R,G,B）$三原色表示，并且$0\le R&lt;maxR, 0\le G&lt;maxG, 0\le B&lt;maxB$。规定相邻的两个栅栏颜色必须符合以下的颜色过渡条件：</p>
<ul>
<li>两种颜色的对应R,G,B差值全部都小于等于d2</li>
<li>两种颜色的对应R,G,B差值至少有一个大于等于d1</li>
</ul>
<p>将$0$号栅栏染色为$(startR, startG, startB)$, 然后按编号逐一染色，每次选择颜色时都是考虑前一个栅栏的颜色，随机等概率从所有符合过渡条件的颜色中挑选。问当完成$N-1$号栅栏的染色时，$N-1$与$0$之间不符合颜色过渡条件的概率是多少。<br>数据范围为50</p>
<h2 id="Solution-1">Solution</h2><p>容易想到dp[i][r][g][b],但是暴力转移的复杂度显然是不能接受的，接下来很容易想到三维前缀和维护转移，不妨反向考虑第$N-1$不合理的情况，看有多少概率最后可以变成初始状态即可。<br>复杂度$O(n \times maxR \times maxG \times maxB)$。</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/topcoder/blob/master/srm540/550.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">51</span>;</span><br><span class="line"><span class="keyword">double</span> dp[<span class="number">41</span>][N][N][N], _[N], sum[N][N][N];</span><br><span class="line"><span class="keyword">struct</span> RandomColoring &#123;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">getProbability</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> maxR, <span class="keyword">int</span> maxG, <span class="keyword">int</span> maxB, <span class="keyword">int</span> startR, <span class="keyword">int</span> startG, <span class="keyword">int</span> startB, <span class="keyword">int</span> d1, <span class="keyword">int</span> d2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; maxR; ++r)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> g = <span class="number">0</span>; g &lt; maxG; ++g)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; maxB; ++b) &#123;</span><br><span class="line">					<span class="keyword">int</span> t1 = <span class="built_in">abs</span>(r - startR), t2 = <span class="built_in">abs</span>(g - startG), t3 = <span class="built_in">abs</span>(b - startB);</span><br><span class="line">					<span class="keyword">if</span> (!(t1 &lt;= d2 &amp;&amp; t2 &lt;= d2 &amp;&amp; t3 &lt;= d2 &amp;&amp; (t1 &gt;= d1 || t2 &gt;= d1 || t3 &gt;= d1)))	dp[n - <span class="number">1</span>][r][g][b] = <span class="number">1.0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">1</span>; r &lt;= maxR; ++r)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> g = <span class="number">1</span>; g &lt;= maxG; ++g)</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">1</span>; b &lt;= maxB; ++b)</span><br><span class="line">						sum[r][g][b] = dp[i + <span class="number">1</span>][r - <span class="number">1</span>][g - <span class="number">1</span>][b - <span class="number">1</span>] + sum[r - <span class="number">1</span>][g][b] + sum[r][g - <span class="number">1</span>][b] + sum[r][g][b - <span class="number">1</span>] - sum[r - <span class="number">1</span>][g - <span class="number">1</span>][b] - sum[r][g - <span class="number">1</span>][b - <span class="number">1</span>] - sum[r - <span class="number">1</span>][g][b - <span class="number">1</span>] + sum[r - <span class="number">1</span>][g - <span class="number">1</span>][b - <span class="number">1</span>];</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; maxR; ++r)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> g = <span class="number">0</span>; g &lt; maxG; ++g)</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; maxB; ++b) &#123;</span><br><span class="line">						<span class="keyword">double</span> &amp;t = dp[i][r][g][b];</span><br><span class="line">						<span class="keyword">int</span> r1 = max(r - d2, <span class="number">0</span>), r2 = min(r + d2 + <span class="number">1</span>, maxR);</span><br><span class="line">						<span class="keyword">int</span> g1 = max(g - d2, <span class="number">0</span>), g2 = min(g + d2 + <span class="number">1</span>, maxG);</span><br><span class="line">						<span class="keyword">int</span> b1 = max(b - d2, <span class="number">0</span>), b2 = min(b + d2 + <span class="number">1</span>, maxB);</span><br><span class="line">						<span class="keyword">int</span> tot = (r2 - r1) * (g2 - g1) * (b2 - b1);</span><br><span class="line">						t = sum[r2][g2][b2] - sum[r1][g2][b2] - sum[r2][g1][b2] - sum[r2][g2][b1] + sum[r1][g1][b2] + sum[r2][g1][b1] + sum[r1][g2][b1] - sum[r1][g1][b1];</span><br><span class="line">						<span class="keyword">if</span> (d1) &#123;</span><br><span class="line">							r1 = max(r - d1 + <span class="number">1</span>, <span class="number">0</span>), r2 = min(r + d1, maxR);</span><br><span class="line">							g1 = max(g - d1 + <span class="number">1</span>, <span class="number">0</span>), g2 = min(g + d1, maxG);</span><br><span class="line">							b1 = max(b - d1 + <span class="number">1</span>, <span class="number">0</span>), b2 = min(b + d1, maxB);</span><br><span class="line">							tot -= (r2 - r1) * (g2 - g1) * (b2 - b1);</span><br><span class="line">							t -= sum[r2][g2][b2] - sum[r1][g2][b2] - sum[r2][g1][b2] - sum[r2][g2][b1] + sum[r1][g1][b2] + sum[r2][g1][b1] + sum[r1][g2][b1] - sum[r1][g1][b1];</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">if</span> (tot)	t /= tot;</span><br><span class="line">					&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> dp[<span class="number">0</span>][startR][startG][startB];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>topcoder, srm 540题解<br>]]>
    
    </summary>
    
      <category term="topcoder题解" scheme="http://mlz000.github.io/categories/topcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[srm 539]]></title>
    <link href="http://mlz000.github.io/2015/07/15/srm-539/"/>
    <id>http://mlz000.github.io/2015/07/15/srm-539/</id>
    <published>2015-07-15T12:12:01.000Z</published>
    <updated>2015-07-16T07:16:12.511Z</updated>
    <content type="html"><![CDATA[<p>tocoder,srm 539题解<br><a id="more"></a></p>
<h1 id="250">250</h1><h2 id="Description:">Description:</h2><p> 从若干个盒子中任意选择几个装石头，每个盒子容量都有上下限，一旦选择使用某个盒子，那么填装的石头数必须在该盒子的上下限容量之间。假设最终填装的石头总数为$x$，那么符合条件$x&gt;9000$的$x$有多少个？<br>     数据规模：盒子总数$[1,15]$, 盒子容量$[1,10^6]$</p>
<h2 id="Solution">Solution</h2><p>盒子总数15很容易想到枚举状态，把每个的上下限存一下，排个序统计一下答案即可。</p>
<h2 id="Code"><a href="https://github.com/mlz000/topcoder/blob/master/srm539/250.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">9000</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; a;</span><br><span class="line"><span class="keyword">class</span> Over9000Rocks &#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">int</span> <span class="title">countPossibilities</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; lowerBound, <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; upperBound)</span> </span>&#123;</span><br><span class="line">        	<span class="keyword">int</span> n = lowerBound.size();</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; ++i) &#123;</span><br><span class="line">				<span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">					<span class="keyword">if</span> (i &gt;&gt; j &amp; <span class="number">1</span>) &#123;</span><br><span class="line">						l += lowerBound[j];</span><br><span class="line">						r += upperBound[j];</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				l = max(l, M + <span class="number">1</span>);</span><br><span class="line">				<span class="keyword">if</span> (l &lt;= r)	a.pb(mp(l, r));</span><br><span class="line">			&#125;</span><br><span class="line">			sort(a.begin(), a.end());</span><br><span class="line">			<span class="keyword">int</span> R = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.size(); ++i) &#123;</span><br><span class="line">				<span class="keyword">if</span> (a[i].F &gt; R)	ans += a[i].S - a[i].F + <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (a[i].S &gt; R)	ans += a[i].S - R;</span><br><span class="line">				R = max(R, a[i].S);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> ans;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="550">550</h1><h2 id="Description">Description</h2><p>目大意：给定一张图，有T个点，现在有 n 个人要从0号点分别走到 1 ~ n 号点，每个人都是沿着自己最短路径走（有多条最短路径则可任意选一条）。如果在到达终点之前，有个人单独行动，则认为这个人是处在危险中的（只有一个人经过某条边）。问n个人该怎么走使得处在危险中的人数最少。</p>
<h2 id="Solution-1">Solution</h2><p>可以想到，如果一个人的是安全的话那么他的最短路径一定可以被另一个人完全覆盖，这样我们把相互可以覆盖的建个图，求匹配即是答案。</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/topcoder/blob/master/srm539/550.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">55</span>;</span><br><span class="line"><span class="keyword">int</span> d[N][N], f[N][N], l[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (f[u][i] &amp;&amp; !vis[i]) &#123;</span><br><span class="line">			vis[i] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (!l[i] || find(l[i], n)) &#123;</span><br><span class="line">				l[i] = u;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> SafeReturn &#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">minRisk</span><span class="params">(<span class="keyword">int</span> T, <span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; streets)</span> </span>&#123;</span><br><span class="line">        	<span class="keyword">int</span> n = streets.size();</span><br><span class="line">			<span class="built_in">memset</span>(d, <span class="number">63</span>, <span class="keyword">sizeof</span>(d));</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">					<span class="keyword">if</span> (streets[i][j] != <span class="string">'-'</span>)	d[i][j] = streets[i][j] - <span class="string">'0'</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)	d[i][i] = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">						d[i][j] = min(d[i][j], d[i][k] + d[k][j]);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= T; ++i)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= T; ++j)</span><br><span class="line">					<span class="keyword">if</span> (i != j &amp;&amp; d[<span class="number">0</span>][j] + d[j][i] == d[<span class="number">0</span>][i])	f[i][j] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">int</span> ans = T;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= T; ++i) &#123;</span><br><span class="line">				<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">				<span class="keyword">if</span> (find(i, T))	--ans;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> ans;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>tocoder,srm 539题解<br>]]>
    
    </summary>
    
      <category term="topcoder题解" scheme="http://mlz000.github.io/categories/topcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[srm 538]]></title>
    <link href="http://mlz000.github.io/2015/07/14/srm-538/"/>
    <id>http://mlz000.github.io/2015/07/14/srm-538/</id>
    <published>2015-07-14T07:37:03.000Z</published>
    <updated>2015-07-16T07:12:01.671Z</updated>
    <content type="html"><![CDATA[<p>topcoder,srm538 题解<br><a id="more"></a></p>
<h1 id="题外话">题外话</h1><p>之前准备期末预习加上刚放假浪了一会= =没有补题，今天开始恢复补题。。</p>
<h1 id="250">250</h1><h2 id="Description:">Description:</h2><p>平面上给出$N$个点，整数坐标。从$(0,0)$出发，每次往上下左右四个垂直方向走，要求遍历所有点至少一次，最后回到给出的N个点中的某个点（不包括原点）。然后走过的距离是曼哈顿距离。给出一个数字代表要求走过的距离为奇还是为偶。问能否满足要求。</p>
<h2 id="Solution">Solution</h2><p>显然如果要求是偶的话只有全奇时无解，若有一个偶数，则可通过往返的方式访问其他点最后停留在偶数点，要求为奇数时同理</p>
<h2 id="Code"><a href="https://github.com/mlz000/topcoder/blob/master/srm538/250.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">class</span> EvenRoute &#123;</span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="built_in">string</span> <span class="title">isItPossible</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; x, <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; y, <span class="keyword">int</span> wantedParity)</span> </span>&#123;</span><br><span class="line">        	<span class="keyword">int</span> n = x.size();</span><br><span class="line">			<span class="keyword">bool</span> even = <span class="number">0</span>, odd = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">				<span class="keyword">if</span> ((<span class="built_in">abs</span>(x[i]) + <span class="built_in">abs</span>(y[i])) &amp; <span class="number">1</span>)	odd = <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">else</span> even = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> (odd &amp;&amp; even) || (even &amp;&amp; !wantedParity) || (odd &amp;&amp; wantedParity) ? <span class="string">"CAN"</span> : <span class="string">"CANNOT"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="450">450</h1><h2 id="Description">Description</h2><p>给出四种命令。左转多少度，右转多少度，前进多远，后退多远。先在顺序是打乱的。要求给出一种排列使得最终总的位移和最远。输出最远距离即可。</p>
<h2 id="Solution-1">Solution</h2><p>一个很明显的直观感受是尽量走直线会使得答案更大一些。这样就很简单了，不妨全向前，然后把调整角度放到后面，最后全向后即可。调整的角度背包求即可</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/topcoder/blob/master/srm538/450.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a, b;<span class="comment">//ang back</span></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">60</span>][<span class="number">360</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> Pi = <span class="built_in">acos</span>(-<span class="number">1.0</span>);</span><br><span class="line"><span class="keyword">class</span> TurtleSpy &#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">double</span> <span class="title">maxDistance</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; commands)</span> </span>&#123;</span><br><span class="line">   			<span class="keyword">int</span> n = commands.size();</span><br><span class="line">			<span class="keyword">double</span> X = <span class="number">0.0</span>, Y = <span class="number">0.0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">				<span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line">				<span class="keyword">int</span> x;</span><br><span class="line">				<span class="built_in">sscanf</span>(commands[i].c_str(), <span class="string">"%s%d"</span>, s, &amp;x);</span><br><span class="line">				<span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'f'</span>)	X += x;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'b'</span>)	Y += x;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'l'</span>)	a.pb(x);</span><br><span class="line">				<span class="keyword">else</span>	a.pb(<span class="number">360</span> - x);</span><br><span class="line">			&#125;</span><br><span class="line">			dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.size(); ++i) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">360</span>; ++j)</span><br><span class="line">					<span class="keyword">if</span> (dp[i][j])	dp[i + <span class="number">1</span>][(j + a[i]) % <span class="number">360</span>] = dp[i + <span class="number">1</span>][j] = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">double</span> t = <span class="number">0.0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">360</span>; ++i) &#123;</span><br><span class="line">				<span class="keyword">if</span> (dp[a.size()][i])	t = max(t, X * X + Y * Y - <span class="number">2.0</span> * X * Y * <span class="built_in">cos</span>(Pi * i / <span class="number">180.0</span>));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">sqrt</span>(t);</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>topcoder,srm538 题解<br>]]>
    
    </summary>
    
      <category term="topcoder题解" scheme="http://mlz000.github.io/categories/topcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[新的Blog]]></title>
    <link href="http://mlz000.github.io/2015/07/11/%E6%96%B0%E7%9A%84Blog/"/>
    <id>http://mlz000.github.io/2015/07/11/新的Blog/</id>
    <published>2015-07-10T16:58:29.000Z</published>
    <updated>2015-07-11T12:19:19.180Z</updated>
    <content type="html"><![CDATA[<p>鼓捣了好久终于搞了一个Blog,感人肺腑QAQ。之前一直想用jekyll的。。然后发现并不好使，只好用Hexo辣O_o<br>反正写Blog也是用Markdown的，所以之前Csdn的blog还是会继续更新，搞这个纯粹是闲着蛋疼为了看着顺眼而已= =。又不想自己搭，所以就这样辣<br>这个Blog大概还是会主要写一些蒟蒻的题解吧，其余的可能会偶尔吹吹比。希望能帮助需要帮助的人和让自己爽爽。。。&gt;_&lt;</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>鼓捣了好久终于搞了一个Blog,感人肺腑QAQ。之前一直想用jekyll的。。然后发现并不好使，只好用Hexo辣O_o<br>反正写Blog也是用Markdown的，所以之前Csdn的blog还是会继续更新，搞这个纯粹是闲着蛋疼为了看着顺眼而已= =。又不想自己搭，所以就这]]>
    </summary>
    
      <category term="随笔" scheme="http://mlz000.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>