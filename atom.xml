<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[mlz000's Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://mlz000.github.io//"/>
  <updated>2015-08-07T15:19:49.233Z</updated>
  <id>http://mlz000.github.io//</id>
  
  <author>
    <name><![CDATA[mlz000]]></name>
    <email><![CDATA[mlz000@outlook.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[2015 ACM多校训练第一场]]></title>
    <link href="http://mlz000.github.io/2015/08/07/2015-ACM%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E7%AC%AC%E4%B8%80%E5%9C%BA/"/>
    <id>http://mlz000.github.io/2015/08/07/2015-ACM多校训练第一场/</id>
    <published>2015-08-07T12:56:18.000Z</published>
    <updated>2015-08-07T15:19:49.233Z</updated>
    <content type="html"><![CDATA[<h1 id="题外话">题外话</h1><p>这个暑假以前就决定要把这次多校的所有题全补了，中间断断续续，总算把第一场的题补全了，鄙视一下颓废的自己。。。</p>
<p><hr></p>
<h1 id="hdu_5288(1001)_OO’s_Sequence">hdu 5288(1001) OO’s Sequence</h1><h2 id="Solution">Solution</h2><p>水题，定义两个数组$L[i], R[i]$示第i个数左侧和右侧最接近它且值是a[i]因子的数字的位置，统计贡献即可。由于a[i]范围很小，因子数很小，暴力统计更新l,r即可。</p>
<h2 id="Code"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/1/01.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5289(1002)_Assignment">hdu 5289(1002) Assignment</h1><h2 id="Solution-1">Solution</h2><p>水题，很容易想到先用st表预处理区间最大最小值，然后枚举左端点，二分右端点检查是否满足即可。复杂度$O(NlogN)$，也可以用单调队列维护最值</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/1/02.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h2 id="hdu_5290(1003)_Bombing_plan">hdu 5290(1003) Bombing plan</h2><h2 id="Solution-2">Solution</h2><p>这题比赛时候没时间看，其实赛后发现并不是很难。看数据范围很容易往O(NW)上去想。于是不难想到dp<br>定义两个数组<br>$f[i][j]$表示以i为根的子树全部破坏掉，还能向上破坏最多j的距离，需要的最少点数<br>$g[i][j]$表示以i为根的子树未被全部破坏掉，且未被破坏的点距离i最远为j，需要的最少点数</p>
<ul>
<li><p>(1)不取i点,则<br>  $$f[i][j]=f[son][j+1]+\sum_{l是i的其他孩子} min(f[l][0],f[l][1],…,f[l][j+1],g[l][0],g[l][1],…,g[l][j-1])$$</p>
<p>  $$g[i][j]=g[son][j-1]+\sum_{l是i的其他孩子} min(f[l][0],f[l][1],…,f[l][j],g[l][0],g[l][1],…,g[l][j-1])$$</p>
</li>
<li>(2)取i点则<br>  $$f[i][w[i]]=1+\sum_{l是i的孩子} min(f[l][0],f[l][1],…,f[l][w[i]+1],g[l][0],g[l][1],…,g[l][w[i]-1])$$<br>很容易想到用两个数组$ff,gg$分别维护$f,g$的最小值，复杂度$O(NW)$，具体实现的时候注意下边界$0$的情况即可。仔细想想，转移方程还是比较容易得到的</li>
</ul>
<h2 id="Code-2"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/1/03.cpp" target="_blank" rel="external">Code</a></h2><p><hr>  </p>
<h1 id="hdu_5291(1004)_Candy_Distribution">hdu 5291(1004) Candy Distribution</h1><h2 id="Solution-3">Solution</h2><p>考虑最暴力的dp,$dp[i][j]表示分配完第i种物品，A比B多j个的方案数$，然后dp转移的时候枚举分给A$x$个，B$y$个，则$dp[i][j+x-y]+=dp[i-1][j]$。考虑第$i$种物品有$s$个，$x+y\le s$时可转移，则$dp[i-1][j]$对$dp[i][j]$的贡献有$\frac{s}{2}+1$次($x=y=0…x=y=\frac{s}{2}$),下发现，j每变化2,贡献-1。奇偶两种情况考虑时，这个东西类似于等差数列，差分两次后我们就可以完成递推了。复杂度$O(n^3)$</p>
<h2 id="Code-3"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/1/04.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5292(1005)_Pocket_Cube">hdu 5292(1005) Pocket Cube</h1><h2 id="Solution-4">Solution</h2><p>这个题就是个找规律的题，看了题解才会做QAQ。。。<br><img src="http://i1.tietuku.com/a1c7349922a9e0de.jpg" alt=""></p>
<h2 id="Code-4"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/1/05.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5293(1006)_Tree_chain_problem">hdu 5293(1006) Tree chain problem</h1><h2 id="Solution-5">Solution</h2><p>比赛时没看，赛后发现是个很裸的题= =。<br>考虑dp，$dp[i]$表示以$i$为根的子树的最优值，则<br>$sum[i]=\sum_{j\in son[i]} dp[j]$<br>容易想到有两种转移</p>
<ul>
<li>(1) $dp[i]=sum[i]$</li>
<li>(2) $dp[i]=value[p]+\sum sum[k]-\sum dp[k]$ $(链p的lca是i,k是链上的节点)$<br>链上求和很容易想到树链剖分，复杂度$O(Nlog^2N)$</li>
</ul>
<h2 id="Code-5"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/1/06.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5294(1007)_Tricks_Device">hdu 5294(1007) Tricks Device</h1><h2 id="Solution-6">Solution</h2><p>水题，最短路寻找道路边数最少的最短路,总边数减去最少条数为第二个问答案。<br>把最短路图抽出来建流量为1的边，最小割即为第一问答案。</p>
<h2 id="Code-6"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/1/07.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5295(1008)_Unstable">hdu 5295(1008) Unstable</h1><h2 id="Solution-7">Solution</h2><p><img src="http://i3.tietuku.com/3d848fc23b742532.jpg" alt=""><br>平几题，给出中点很容易想到倍长的事情。如图，倍长$AF$，做$BG$平行于$AD$且$|BG|=|AD|$，容易看出三角形$FDA$和三角形$FCA’全等$<br>不妨固定BC,$A’$可以通过以$C$圆心，半径长为$da$，和以$B$为圆心，半径长为$2ef$的圆交点得到。<br>由于$A’GBC$是平行四边形，可以得到G的坐标。于是$D$的坐标可以通过以$C$为圆心，半径长为$cd$，和以$G$为圆心，半径长为$DG$(即$ab$)的圆得到。于是可以得到$A$的坐标</p>
<h2 id="Code-7"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/1/08.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5296(1009)_Annoying_problem">hdu 5296(1009) Annoying problem</h1><h2 id="Solution-8">Solution</h2><p>比赛时自己蠢一直没想出来，想过dfs序但没细想= =<br>其实每次插入的时候找两个dfs序最接近的点$x,y$一个大于$u$一个小于$u$即可。每次增加的花费是$dis[u]-dis[lca(x,u)]-dis[lca(y,u)]+dis[lca(x,y)]$，即为$u$到$x-y$链上的距离。删除时类似。<br>找不到这样的点时直接取最大和最小dfs序的两个点即可<br>为什么这样呢，给定固定点把它们连通得到的树一定是固定的。这样选点的目的是为了不让边重复。</p>
<h2 id="Code-8"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/1/09.cpp" target="_blank" rel="external">Code</a></h2><h1 id="hdu_5297(1010)_Y_sequence">hdu 5297(1010) Y sequence</h1><h2 id="Solution-9">Solution</h2><p>这个题比赛时我写的二分，一直T，= =非常蛋疼。赛后看题解和问别人才知道，可以迭代，迭代次数不会太多。<br>首先考虑反函数$f(x)$表示前$x$个数中Y-sequence的数量。我们迭代来算这个值，不用二分。<br>我们要求第$n$个Y-sequence，开始令$x=n$，如果$f(x)=now$，那么前$x$个数中有$n-now$个不是Y-sequence的数，那么我们令$x=x+n-now$，看看新的$f(x)$是否等于n即可。<br>我们每次只加了缺少的答案数，所以不可能超过正确答案。<br>迭代还是玄学啊。。。。新姿势get</p>
<h2 id="Code-9"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/1/10.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5298(1011)_Solid_Geometry_Homework">hdu 5298(1011) Solid Geometry Homework</h1><h2 id="Solution-10">Solution</h2><p>比赛时以为是大型计算几何看都没看，赛后发现这是个SB题，把点带到平面和球面方程中，确定点在哪一边把结果异或一下考虑染色即可。</p>
<h2 id="Code-10"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/1/11.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5299(1012)_Circles_Game">hdu 5299(1012) Circles Game</h1><h2 id="Solution-11">Solution</h2><p>自己太弱，不会扫描线，赛后补了下姿势。。<br>很容易想到扫描线处理圆，把圆变成树，然后就变成了经典博弈问题树上删边问题，具体可以看09年国家集训队论文&lt;&lt;组合游戏略述——浅谈SG游戏的若干拓展及变形&gt;&gt;。<br>结论是叶子节点$sg值为0$其余节点$sg$值为所以孩子节点$sg$值$+1$的异或和。</p>
<h2 id="Code-11"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/1/12.cpp" target="_blank" rel="external">Code</a></h2><p>完结撒花！<br>继续补题！&gt;_&lt;</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="题外话">题外话</h1><p>这个暑假以前就决定要把这次多校的所有题全补了，中间断断续续，总算把第一场的题补全了，鄙视一下颓废的自己。。。</p>
<p><hr></p>
<h1 id="hdu_5288(1001)_OO’s_Sequence">hdu 528]]>
    </summary>
    
      <category term="hdu" scheme="http://mlz000.github.io/categories/hdu/"/>
    
      <category term="ACM多校题解" scheme="http://mlz000.github.io/categories/hdu/ACM%E5%A4%9A%E6%A0%A1%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[srm 542]]></title>
    <link href="http://mlz000.github.io/2015/07/20/srm-542/"/>
    <id>http://mlz000.github.io/2015/07/20/srm-542/</id>
    <published>2015-07-20T12:05:42.000Z</published>
    <updated>2015-07-20T12:57:29.948Z</updated>
    <content type="html"><![CDATA[<h1 id="250">250</h1><p><hr></p>
<h2 id="Description">Description</h2><p>从矩形地图中选三个点，使得A-B,B-C,C-A的曼哈顿距离和在给定的一个范围内，求多少种选法。$X,Y\le 3000$</p>
<h2 id="Solution">Solution</h2><p>水题，很容易发现曼哈顿距离和是一个矩形的周长，枚举长和宽统计即可。</p>
<h2 id="Code"><a href="https://github.com/mlz000/topcoder/blob/master/srm542/250.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5000</span>;</span><br><span class="line"><span class="keyword">struct</span> PatrolRoute &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countRoutes</span><span class="params">(<span class="keyword">int</span> X, <span class="keyword">int</span> Y, <span class="keyword">int</span> minT, <span class="keyword">int</span> maxT)</span> </span>&#123;</span><br><span class="line">		LL ans = <span class="number">0</span>;</span><br><span class="line">  		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; X; ++i)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; Y; ++j) &#123;</span><br><span class="line">				<span class="keyword">if</span> ((i + j) * <span class="number">2</span> &gt;= minT &amp;&amp; (i + j) * <span class="number">2</span> &lt;= maxT) &#123;</span><br><span class="line">					ans += <span class="number">1l</span>l * (X - i) * (Y - j) % M * (i - <span class="number">1</span>) % M * (j - <span class="number">1</span>) % M;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">return</span> ans * <span class="number">6</span> % M;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="500">500</h1><p><hr></p>
<h2 id="Description-1">Description</h2><p>给出$n$个长度都为$m$的字符串。$n\le 16, m\le 50$，任两个字符串之间的大小关系由一个随即产生的排列来决定。即，如果比较至第$i$位，则去比较$pa_i$和$pb_i$的大小关系，从而确定字符串的大小关系。问$words_i$排完序后是最小串的概率。</p>
<h2 id="Solution-1">Solution</h2><p>感觉这题很难QAQ，首先n=16可以想到状压Dp，但是状态很难想，看了别人的题解才会做。。<br>$dp[i][mask]$表示当前状态是$mask$，第$i$个人是最小串的概率，$mask$为i的位置表示该串已被选择。在统计第$i$个串的概率时同时记录每位字母对应比该串小的和相等的状态。分别用$small[j]$和$same[j]$存二进制状态。<br>当$small[j] \&amp; mask &gt; 0$时，显然不可以转移，当$same[j] \&amp; mask=mask$时，转移没什么意义，否则$dp[i][mask] += dp[i][same[j] \&amp; mask]$</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/topcoder/blob/master/srm542/500.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//状压Dp</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">int</span> small[<span class="number">51</span>], same[<span class="number">51</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; ans; </span><br><span class="line"><span class="keyword">double</span> dp[N][<span class="number">1</span> &lt;&lt; N];</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">gao</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> mask, <span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (dp[x][mask] != -<span class="number">1.0</span>)	<span class="keyword">return</span> dp[x][mask];</span><br><span class="line">	<span class="keyword">double</span> &amp;t = dp[x][mask];</span><br><span class="line">	<span class="keyword">if</span> (mask == (<span class="number">1</span> &lt;&lt; x))	<span class="keyword">return</span> t = <span class="number">1.0</span>;</span><br><span class="line">	t = <span class="number">0.0</span>;</span><br><span class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> ((small[i] &amp; mask) &gt; <span class="number">0</span>)	++cnt;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> ((same[i] &amp; mask) != mask)	++cnt, t += gao(x, mask &amp; same[i], l);</span><br><span class="line">	&#125;</span><br><span class="line">	t /= cnt;</span><br><span class="line">	<span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> StrangeDictionary2 &#123;</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="keyword">double</span>&gt; getProbabilities(<span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; words) &#123;</span><br><span class="line">  		<span class="keyword">int</span> n = words.size(), l = words[<span class="number">0</span>].size();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span> &lt;&lt; n; ++j)</span><br><span class="line">				dp[i][j] = -<span class="number">1.0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			<span class="built_in">memset</span>(small, <span class="number">0</span>, <span class="keyword">sizeof</span>(small));</span><br><span class="line">			<span class="built_in">memset</span>(same, <span class="number">0</span>, <span class="keyword">sizeof</span>(same));</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; l; ++k)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">					<span class="keyword">if</span> (words[j][k] &lt; words[i][k])	small[k] |= <span class="number">1</span> &lt;&lt; j;</span><br><span class="line">					<span class="keyword">else</span> <span class="keyword">if</span> (words[j][k] == words[i][k])	same[k] |= <span class="number">1</span> &lt;&lt; j;</span><br><span class="line">				&#125;</span><br><span class="line">			ans.pb(gao(i, (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>, l));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="250">250</h1><p><hr></p>
<h2 id="Description">Description</h2><p>从矩形地图中选三个点，使得A-B,B-C,C-A的曼哈顿距离和在给定的一个范围内，求多少种选法。$X,Y\le 3000$</p>
<]]>
    </summary>
    
      <category term="topcoder题解" scheme="http://mlz000.github.io/categories/topcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[srm 541]]></title>
    <link href="http://mlz000.github.io/2015/07/19/srm-541/"/>
    <id>http://mlz000.github.io/2015/07/19/srm-541/</id>
    <published>2015-07-19T07:28:33.000Z</published>
    <updated>2015-07-19T07:46:46.716Z</updated>
    <content type="html"><![CDATA[<h1 id="250">250</h1><p><hr></p>
<h2 id="Solution">Solution</h2><p>水题，最暴力的方法枚举即可</p>
<h2 id="Code"><a href="https://github.com/mlz000/topcoder/blob/master/srm541/250.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="keyword">int</span> dx[] = &#123;<span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">55</span>;</span><br><span class="line"><span class="keyword">int</span> f[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="keyword">struct</span> AntsMeet &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countAnts</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; x, <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; y, <span class="built_in">string</span> direction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = x.size();</span><br><span class="line">        s[<span class="string">'N'</span>] = <span class="number">0</span>, s[<span class="string">'E'</span>] = <span class="number">1</span>, s[<span class="string">'W'</span>] = <span class="number">2</span>, s[<span class="string">'S'</span>] = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) x[i] &lt;&lt;= <span class="number">1</span>, y[i] &lt;&lt;= <span class="number">1</span>, f[i] = s[direction[i]], vis[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4001</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                <span class="keyword">if</span> (vis[j]) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt; n; ++k)</span><br><span class="line">                        <span class="keyword">if</span> (vis[k]) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (x[j] == x[k] &amp;&amp; y[j] == y[k])   vis[j] = vis[k] = <span class="number">0</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                <span class="keyword">if</span> (vis[j]) &#123;</span><br><span class="line">                    x[j] += dx[f[j]];</span><br><span class="line">                    y[j] += dy[f[j]];</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) </span><br><span class="line">            <span class="keyword">if</span> (vis[i]) ++ans;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="550">550</h1><p><hr></p>
<h2 id="Description">Description</h2><p>给出串$A,B,C,S,F$和整数$k$。以及函数$f(x) = A+x+B+x+C$。求$f^k(x)$中以F为子串，出现了多少次。答案mod $10^{9}+7$。串的长度$\le 50$, $k\le 10^7$</p>
<h2 id="Solution-1">Solution</h2><p>注意到串长度$\le 50$,以及$k\le 10^7$，而且出现F的情况分为在A，B，C三个串中分别出现，以及在交界处出现。由于串的长度比较小，所以我们暴力50次以后，交界处包含F的次数就不再变化了（想一想，为什么）。于是后面的情况我们每次$ans = ans \times 2 + t$即可。。$t$是交界处的答案，$ans$是$A,B,C$中的答案。</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/topcoder/blob/master/srm541/550.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">struct</span> AkariDaisukiDiv1 &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">gao</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s, <span class="keyword">const</span> <span class="built_in">string</span> &amp;t, <span class="keyword">int</span> l = 0, <span class="keyword">int</span> r = 100000000)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt; s.size() - t.size() + <span class="number">1</span> &amp;&amp; i &lt; r; ++i)</span><br><span class="line">            <span class="keyword">if</span> (s.substr(i, t.size()) == t) ++tmp;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countF</span><span class="params">(<span class="built_in">string</span> A, <span class="built_in">string</span> B, <span class="built_in">string</span> C, <span class="built_in">string</span> S, <span class="built_in">string</span> F, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; cnt &lt; k &amp;&amp; S.size() &lt; F.size(); ++cnt)   S = A + S + B + S + C;</span><br><span class="line">        <span class="keyword">if</span> (S.size() &lt; F.size())    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = gao(S, F), t = <span class="number">0</span>; </span><br><span class="line">        <span class="built_in">string</span> p = S.substr(<span class="number">0</span>, F.size()), q = S.substr(S.size() - F.size(), F.size());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; cnt &lt; k &amp;&amp; i &lt; <span class="number">50</span>; ++cnt, ++i) &#123;</span><br><span class="line">            t = gao(A + p, F, <span class="number">0</span>, A.size()) + gao(q + B + p, F, <span class="number">1</span>, F.size() + B.size()) + gao(q + C, F, <span class="number">1</span>);</span><br><span class="line">            ans = (ans + ans + t) % M;</span><br><span class="line">            p = (A + p).substr(<span class="number">0</span>, F.size()), q = (q + C).substr((q + C).size() - F.size(), F.size());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (; cnt &lt; k; ++cnt)  ans = (ans + ans + t) % M;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="250">250</h1><p><hr></p>
<h2 id="Solution">Solution</h2><p>水题，最暴力的方法枚举即可</p>
<h2 id="Code"><a href="https://github.com/mlz000/topcod]]>
    </summary>
    
      <category term="topcoder题解" scheme="http://mlz000.github.io/categories/topcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[srm 540]]></title>
    <link href="http://mlz000.github.io/2015/07/16/srm-540/"/>
    <id>http://mlz000.github.io/2015/07/16/srm-540/</id>
    <published>2015-07-16T13:21:32.000Z</published>
    <updated>2015-07-16T13:43:15.039Z</updated>
    <content type="html"><![CDATA[<p>topcoder, srm 540题解<br><a id="more"></a></p>
<h1 id="250">250</h1><h2 id="Description:">Description:</h2><p>给定 一个数组B，和一个”+-“组成的字符数组，求有多少种A数组。<br>B数组是由A数组相邻的两个数和符号运算后的结果。</p>
<h2 id="Solution">Solution</h2><p>显然如果第一个数固定，整个A数组就固定下来了，所以就是求第一个数有多少种可能。我们发现给定的是$A_1+x_2，A_2-A_3…$这种形式。于是我们可以通过连续的运算得到$A_1$和其他$A_i$的关系，取上下界即可。</p>
<h2 id="Code"><a href="https://github.com/mlz000/topcoder/blob/master/srm540/250.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="built_in">vector</span>&lt;LL&gt; B(<span class="number">51</span>);</span><br><span class="line"><span class="keyword">struct</span> ImportantSequence &#123;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; b, <span class="built_in">string</span> operators)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> n = b.size();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)	B[i] = b[i];</span><br><span class="line">		LL L = <span class="number">1</span>, R = <span class="number">1e18</span>, now = -<span class="number">1</span>, last = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			<span class="keyword">if</span> (now == <span class="number">1</span>)	B[i] = last - B[i];</span><br><span class="line">			<span class="keyword">else</span> B[i] += last;</span><br><span class="line">			now = (now == <span class="number">1</span>) ? (operators[i] == <span class="string">'+'</span> ? -<span class="number">1</span> : <span class="number">1</span>) : (operators[i] == <span class="string">'+'</span> ? <span class="number">1</span> : -<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span> (now == <span class="number">1</span>)	R = min(R, (LL)B[i] - <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">else</span> L = max(L, (LL)B[i] + <span class="number">1</span>);</span><br><span class="line">			last = B[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> L &gt; R ? <span class="number">0</span> : R - L &gt; <span class="number">2e9</span> ? -<span class="number">1</span> : R - L + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="550">550</h1><h2 id="Description">Description</h2><p>$N$ 个栅栏按照标号$0,1,…,N-1$围成一个圈，从$0$号栅栏开始染色。每一种颜色用$（R,G,B）$三原色表示，并且$0\le R&lt;maxR, 0\le G&lt;maxG, 0\le B&lt;maxB$。规定相邻的两个栅栏颜色必须符合以下的颜色过渡条件：</p>
<ul>
<li>两种颜色的对应R,G,B差值全部都小于等于d2</li>
<li>两种颜色的对应R,G,B差值至少有一个大于等于d1</li>
</ul>
<p>将$0$号栅栏染色为$(startR, startG, startB)$, 然后按编号逐一染色，每次选择颜色时都是考虑前一个栅栏的颜色，随机等概率从所有符合过渡条件的颜色中挑选。问当完成$N-1$号栅栏的染色时，$N-1$与$0$之间不符合颜色过渡条件的概率是多少。<br>数据范围为50</p>
<h2 id="Solution-1">Solution</h2><p>容易想到dp[i][r][g][b],但是暴力转移的复杂度显然是不能接受的，接下来很容易想到三维前缀和维护转移，不妨反向考虑第$N-1$不合理的情况，看有多少概率最后可以变成初始状态即可。<br>复杂度$O(n \times maxR \times maxG \times maxB)$。</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/topcoder/blob/master/srm540/550.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">51</span>;</span><br><span class="line"><span class="keyword">double</span> dp[<span class="number">41</span>][N][N][N], _[N], sum[N][N][N];</span><br><span class="line"><span class="keyword">struct</span> RandomColoring &#123;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">getProbability</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> maxR, <span class="keyword">int</span> maxG, <span class="keyword">int</span> maxB, <span class="keyword">int</span> startR, <span class="keyword">int</span> startG, <span class="keyword">int</span> startB, <span class="keyword">int</span> d1, <span class="keyword">int</span> d2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; maxR; ++r)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> g = <span class="number">0</span>; g &lt; maxG; ++g)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; maxB; ++b) &#123;</span><br><span class="line">					<span class="keyword">int</span> t1 = <span class="built_in">abs</span>(r - startR), t2 = <span class="built_in">abs</span>(g - startG), t3 = <span class="built_in">abs</span>(b - startB);</span><br><span class="line">					<span class="keyword">if</span> (!(t1 &lt;= d2 &amp;&amp; t2 &lt;= d2 &amp;&amp; t3 &lt;= d2 &amp;&amp; (t1 &gt;= d1 || t2 &gt;= d1 || t3 &gt;= d1)))	dp[n - <span class="number">1</span>][r][g][b] = <span class="number">1.0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">1</span>; r &lt;= maxR; ++r)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> g = <span class="number">1</span>; g &lt;= maxG; ++g)</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">1</span>; b &lt;= maxB; ++b)</span><br><span class="line">						sum[r][g][b] = dp[i + <span class="number">1</span>][r - <span class="number">1</span>][g - <span class="number">1</span>][b - <span class="number">1</span>] + sum[r - <span class="number">1</span>][g][b] + sum[r][g - <span class="number">1</span>][b] + sum[r][g][b - <span class="number">1</span>] - sum[r - <span class="number">1</span>][g - <span class="number">1</span>][b] - sum[r][g - <span class="number">1</span>][b - <span class="number">1</span>] - sum[r - <span class="number">1</span>][g][b - <span class="number">1</span>] + sum[r - <span class="number">1</span>][g - <span class="number">1</span>][b - <span class="number">1</span>];</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; maxR; ++r)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> g = <span class="number">0</span>; g &lt; maxG; ++g)</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; maxB; ++b) &#123;</span><br><span class="line">						<span class="keyword">double</span> &amp;t = dp[i][r][g][b];</span><br><span class="line">						<span class="keyword">int</span> r1 = max(r - d2, <span class="number">0</span>), r2 = min(r + d2 + <span class="number">1</span>, maxR);</span><br><span class="line">						<span class="keyword">int</span> g1 = max(g - d2, <span class="number">0</span>), g2 = min(g + d2 + <span class="number">1</span>, maxG);</span><br><span class="line">						<span class="keyword">int</span> b1 = max(b - d2, <span class="number">0</span>), b2 = min(b + d2 + <span class="number">1</span>, maxB);</span><br><span class="line">						<span class="keyword">int</span> tot = (r2 - r1) * (g2 - g1) * (b2 - b1);</span><br><span class="line">						t = sum[r2][g2][b2] - sum[r1][g2][b2] - sum[r2][g1][b2] - sum[r2][g2][b1] + sum[r1][g1][b2] + sum[r2][g1][b1] + sum[r1][g2][b1] - sum[r1][g1][b1];</span><br><span class="line">						<span class="keyword">if</span> (d1) &#123;</span><br><span class="line">							r1 = max(r - d1 + <span class="number">1</span>, <span class="number">0</span>), r2 = min(r + d1, maxR);</span><br><span class="line">							g1 = max(g - d1 + <span class="number">1</span>, <span class="number">0</span>), g2 = min(g + d1, maxG);</span><br><span class="line">							b1 = max(b - d1 + <span class="number">1</span>, <span class="number">0</span>), b2 = min(b + d1, maxB);</span><br><span class="line">							tot -= (r2 - r1) * (g2 - g1) * (b2 - b1);</span><br><span class="line">							t -= sum[r2][g2][b2] - sum[r1][g2][b2] - sum[r2][g1][b2] - sum[r2][g2][b1] + sum[r1][g1][b2] + sum[r2][g1][b1] + sum[r1][g2][b1] - sum[r1][g1][b1];</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">if</span> (tot)	t /= tot;</span><br><span class="line">					&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> dp[<span class="number">0</span>][startR][startG][startB];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>topcoder, srm 540题解<br>]]>
    
    </summary>
    
      <category term="topcoder题解" scheme="http://mlz000.github.io/categories/topcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[srm 539]]></title>
    <link href="http://mlz000.github.io/2015/07/15/srm-539/"/>
    <id>http://mlz000.github.io/2015/07/15/srm-539/</id>
    <published>2015-07-15T12:12:01.000Z</published>
    <updated>2015-07-16T07:16:12.511Z</updated>
    <content type="html"><![CDATA[<p>tocoder,srm 539题解<br><a id="more"></a></p>
<h1 id="250">250</h1><h2 id="Description:">Description:</h2><p> 从若干个盒子中任意选择几个装石头，每个盒子容量都有上下限，一旦选择使用某个盒子，那么填装的石头数必须在该盒子的上下限容量之间。假设最终填装的石头总数为$x$，那么符合条件$x&gt;9000$的$x$有多少个？<br>     数据规模：盒子总数$[1,15]$, 盒子容量$[1,10^6]$</p>
<h2 id="Solution">Solution</h2><p>盒子总数15很容易想到枚举状态，把每个的上下限存一下，排个序统计一下答案即可。</p>
<h2 id="Code"><a href="https://github.com/mlz000/topcoder/blob/master/srm539/250.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">9000</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; a;</span><br><span class="line"><span class="keyword">class</span> Over9000Rocks &#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">int</span> <span class="title">countPossibilities</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; lowerBound, <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; upperBound)</span> </span>&#123;</span><br><span class="line">        	<span class="keyword">int</span> n = lowerBound.size();</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; ++i) &#123;</span><br><span class="line">				<span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">					<span class="keyword">if</span> (i &gt;&gt; j &amp; <span class="number">1</span>) &#123;</span><br><span class="line">						l += lowerBound[j];</span><br><span class="line">						r += upperBound[j];</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				l = max(l, M + <span class="number">1</span>);</span><br><span class="line">				<span class="keyword">if</span> (l &lt;= r)	a.pb(mp(l, r));</span><br><span class="line">			&#125;</span><br><span class="line">			sort(a.begin(), a.end());</span><br><span class="line">			<span class="keyword">int</span> R = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.size(); ++i) &#123;</span><br><span class="line">				<span class="keyword">if</span> (a[i].F &gt; R)	ans += a[i].S - a[i].F + <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (a[i].S &gt; R)	ans += a[i].S - R;</span><br><span class="line">				R = max(R, a[i].S);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> ans;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="550">550</h1><h2 id="Description">Description</h2><p>目大意：给定一张图，有T个点，现在有 n 个人要从0号点分别走到 1 ~ n 号点，每个人都是沿着自己最短路径走（有多条最短路径则可任意选一条）。如果在到达终点之前，有个人单独行动，则认为这个人是处在危险中的（只有一个人经过某条边）。问n个人该怎么走使得处在危险中的人数最少。</p>
<h2 id="Solution-1">Solution</h2><p>可以想到，如果一个人的是安全的话那么他的最短路径一定可以被另一个人完全覆盖，这样我们把相互可以覆盖的建个图，求匹配即是答案。</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/topcoder/blob/master/srm539/550.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">55</span>;</span><br><span class="line"><span class="keyword">int</span> d[N][N], f[N][N], l[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (f[u][i] &amp;&amp; !vis[i]) &#123;</span><br><span class="line">			vis[i] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (!l[i] || find(l[i], n)) &#123;</span><br><span class="line">				l[i] = u;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> SafeReturn &#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">minRisk</span><span class="params">(<span class="keyword">int</span> T, <span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; streets)</span> </span>&#123;</span><br><span class="line">        	<span class="keyword">int</span> n = streets.size();</span><br><span class="line">			<span class="built_in">memset</span>(d, <span class="number">63</span>, <span class="keyword">sizeof</span>(d));</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">					<span class="keyword">if</span> (streets[i][j] != <span class="string">'-'</span>)	d[i][j] = streets[i][j] - <span class="string">'0'</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)	d[i][i] = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">						d[i][j] = min(d[i][j], d[i][k] + d[k][j]);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= T; ++i)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= T; ++j)</span><br><span class="line">					<span class="keyword">if</span> (i != j &amp;&amp; d[<span class="number">0</span>][j] + d[j][i] == d[<span class="number">0</span>][i])	f[i][j] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">int</span> ans = T;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= T; ++i) &#123;</span><br><span class="line">				<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">				<span class="keyword">if</span> (find(i, T))	--ans;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> ans;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>tocoder,srm 539题解<br>]]>
    
    </summary>
    
      <category term="topcoder题解" scheme="http://mlz000.github.io/categories/topcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[srm 538]]></title>
    <link href="http://mlz000.github.io/2015/07/14/srm-538/"/>
    <id>http://mlz000.github.io/2015/07/14/srm-538/</id>
    <published>2015-07-14T07:37:03.000Z</published>
    <updated>2015-07-16T07:12:01.671Z</updated>
    <content type="html"><![CDATA[<p>topcoder,srm538 题解<br><a id="more"></a></p>
<h1 id="题外话">题外话</h1><p>之前准备期末预习加上刚放假浪了一会= =没有补题，今天开始恢复补题。。</p>
<h1 id="250">250</h1><h2 id="Description:">Description:</h2><p>平面上给出$N$个点，整数坐标。从$(0,0)$出发，每次往上下左右四个垂直方向走，要求遍历所有点至少一次，最后回到给出的N个点中的某个点（不包括原点）。然后走过的距离是曼哈顿距离。给出一个数字代表要求走过的距离为奇还是为偶。问能否满足要求。</p>
<h2 id="Solution">Solution</h2><p>显然如果要求是偶的话只有全奇时无解，若有一个偶数，则可通过往返的方式访问其他点最后停留在偶数点，要求为奇数时同理</p>
<h2 id="Code"><a href="https://github.com/mlz000/topcoder/blob/master/srm538/250.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">class</span> EvenRoute &#123;</span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="built_in">string</span> <span class="title">isItPossible</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; x, <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; y, <span class="keyword">int</span> wantedParity)</span> </span>&#123;</span><br><span class="line">        	<span class="keyword">int</span> n = x.size();</span><br><span class="line">			<span class="keyword">bool</span> even = <span class="number">0</span>, odd = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">				<span class="keyword">if</span> ((<span class="built_in">abs</span>(x[i]) + <span class="built_in">abs</span>(y[i])) &amp; <span class="number">1</span>)	odd = <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">else</span> even = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> (odd &amp;&amp; even) || (even &amp;&amp; !wantedParity) || (odd &amp;&amp; wantedParity) ? <span class="string">"CAN"</span> : <span class="string">"CANNOT"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="450">450</h1><h2 id="Description">Description</h2><p>给出四种命令。左转多少度，右转多少度，前进多远，后退多远。先在顺序是打乱的。要求给出一种排列使得最终总的位移和最远。输出最远距离即可。</p>
<h2 id="Solution-1">Solution</h2><p>一个很明显的直观感受是尽量走直线会使得答案更大一些。这样就很简单了，不妨全向前，然后把调整角度放到后面，最后全向后即可。调整的角度背包求即可</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/topcoder/blob/master/srm538/450.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a, b;<span class="comment">//ang back</span></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">60</span>][<span class="number">360</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> Pi = <span class="built_in">acos</span>(-<span class="number">1.0</span>);</span><br><span class="line"><span class="keyword">class</span> TurtleSpy &#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">double</span> <span class="title">maxDistance</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; commands)</span> </span>&#123;</span><br><span class="line">   			<span class="keyword">int</span> n = commands.size();</span><br><span class="line">			<span class="keyword">double</span> X = <span class="number">0.0</span>, Y = <span class="number">0.0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">				<span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line">				<span class="keyword">int</span> x;</span><br><span class="line">				<span class="built_in">sscanf</span>(commands[i].c_str(), <span class="string">"%s%d"</span>, s, &amp;x);</span><br><span class="line">				<span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'f'</span>)	X += x;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'b'</span>)	Y += x;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'l'</span>)	a.pb(x);</span><br><span class="line">				<span class="keyword">else</span>	a.pb(<span class="number">360</span> - x);</span><br><span class="line">			&#125;</span><br><span class="line">			dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.size(); ++i) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">360</span>; ++j)</span><br><span class="line">					<span class="keyword">if</span> (dp[i][j])	dp[i + <span class="number">1</span>][(j + a[i]) % <span class="number">360</span>] = dp[i + <span class="number">1</span>][j] = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">double</span> t = <span class="number">0.0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">360</span>; ++i) &#123;</span><br><span class="line">				<span class="keyword">if</span> (dp[a.size()][i])	t = max(t, X * X + Y * Y - <span class="number">2.0</span> * X * Y * <span class="built_in">cos</span>(Pi * i / <span class="number">180.0</span>));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">sqrt</span>(t);</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>topcoder,srm538 题解<br>]]>
    
    </summary>
    
      <category term="topcoder题解" scheme="http://mlz000.github.io/categories/topcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[新的Blog]]></title>
    <link href="http://mlz000.github.io/2015/07/11/%E6%96%B0%E7%9A%84Blog/"/>
    <id>http://mlz000.github.io/2015/07/11/新的Blog/</id>
    <published>2015-07-10T16:58:29.000Z</published>
    <updated>2015-07-11T12:19:19.180Z</updated>
    <content type="html"><![CDATA[<p>鼓捣了好久终于搞了一个Blog,感人肺腑QAQ。之前一直想用jekyll的。。然后发现并不好使，只好用Hexo辣O_o<br>反正写Blog也是用Markdown的，所以之前Csdn的blog还是会继续更新，搞这个纯粹是闲着蛋疼为了看着顺眼而已= =。又不想自己搭，所以就这样辣<br>这个Blog大概还是会主要写一些蒟蒻的题解吧，其余的可能会偶尔吹吹比。希望能帮助需要帮助的人和让自己爽爽。。。&gt;_&lt;</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>鼓捣了好久终于搞了一个Blog,感人肺腑QAQ。之前一直想用jekyll的。。然后发现并不好使，只好用Hexo辣O_o<br>反正写Blog也是用Markdown的，所以之前Csdn的blog还是会继续更新，搞这个纯粹是闲着蛋疼为了看着顺眼而已= =。又不想自己搭，所以就这]]>
    </summary>
    
      <category term="随笔" scheme="http://mlz000.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>