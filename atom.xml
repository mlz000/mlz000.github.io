<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[mlz000's Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://mlz000.github.io//"/>
  <updated>2015-11-24T15:01:04.096Z</updated>
  <id>http://mlz000.github.io//</id>
  
  <author>
    <name><![CDATA[mlz000]]></name>
    <email><![CDATA[mlz000@outlook.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[bzoj 3572[HNOI2014]世界树]]></title>
    <link href="http://mlz000.github.io/2015/11/24/bzoj-3572-HNOI2014-%E4%B8%96%E7%95%8C%E6%A0%91/"/>
    <id>http://mlz000.github.io/2015/11/24/bzoj-3572-HNOI2014-世界树/</id>
    <published>2015-11-24T13:37:51.000Z</published>
    <updated>2015-11-24T15:01:04.096Z</updated>
    <content type="html"><![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_1/collectPlayer.swf" type="application/x-shockwave-flash" width="235" height="346" wmode="opaque">

<h2 id="Descripiton">Descripiton</h2><p>给定一棵树，有若干个询问，每次给定$m$个点，每个点都被这$m$个点中最近（距离相同，编号小的近）的点管辖。问$m$个点分别管几个点<br>$\sum m\le 300000$</p>
<h2 id="Solution">Solution</h2><p>一个很经典的题，通过这题学到了一个叫虚树的东西，修为得到的精进<br>虚树就是包含了给定点，并收缩了不分叉边的连通子图<br>然后我们讨论下虚树的构建<br>先给代码<br>$t$表示虚树的节点，$h$是给定点，$st$是栈<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line">    sort(h + <span class="number">1</span>, h + m + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!top)   fa[st[++top] = h[i]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> x = lca(st[top], h[i]);</span><br><span class="line">            <span class="keyword">for</span> (; dep[st[top]] &gt; dep[x]; --top)</span><br><span class="line">                <span class="keyword">if</span> (dep[st[top - <span class="number">1</span>]] &lt;= dep[x]) fa[st[top]] = x;</span><br><span class="line">            <span class="keyword">if</span> (st[top] != x) &#123;</span><br><span class="line">                fa[x] = st[top];</span><br><span class="line">                t[++tot] = st[++top] = x;</span><br><span class="line">                near[x] = mp(<span class="number">0x3f3f3f3f</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            fa[st[++top] = h[i]] = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们将给定点按lca递增排序，用一个栈表示已构建的虚树上以最后一个点为断点的链,设栈顶元素为p,当前点为x,然后我们求出lca<br>有两种情况</p>
<ul>
<li>(1):$p$和$x$在$lca$的两棵子树下</li>
<li>(2):$lca$是$p$<br>对于第二种情况，由于$dfs$序递增，$lca$不可能是$x$,因为$lca$一定不晚于$p$访问，这种情况直接连边即可<br>对于第一种情况，由于$dfn[lca] &lt; dfn[p] &lt; dfn[x]$，说明$p$的子树我们一定都处理完了，否则一定会在x前处理<br>由于$p$子树已经处理完，我们可以退栈辣，退栈直到lca夹在两个栈元素之间，处理完边的关系，再退一次，这条链就处理完辣！<br>然后就可以继续把当前x加入栈中，继续处理这条链，代码很短，但是需要理解一会~</li>
</ul>
<p>容易发现构建的虚树最多$2m$个点，完全可以接受<br>构建完虚树就是树形dp的事情了，先按$dfs$序正反两遍扫出虚树上每个点被哪个点管理，并记录距离。(容易想到用个pair来存，编程复杂度会少一些)<br>继续按dfs序递增处理<br>如果是虚树的根，那么首先对管理它的点的贡献就是$n-sz[rt]$<br>假设当前点是$x$,虚树上的父节点是$fa$,$rt$同时是真树上$x$的祖先和fa的儿子,考虑$fa$和$x$是否被同一个点管辖，如果是，中间都属于同一个点<br>否则考虑尽量靠中间的点，分奇偶讨论下即可</p>
<h2 id="Code"><a href="https://github.com/mlz000/bzoj/blob/master/3572(%E8%99%9A%E6%A0%91).cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;<span class="comment">//虚树</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[N];</span><br><span class="line">pii near[N];</span><br><span class="line"><span class="keyword">int</span> n, tot, ind, dep[N], dfn[N], sz[N], f[N][<span class="number">20</span>], pos[N], h[N], t[N], st[N], fa[N], w[N], dis[N], ans[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x, <span class="keyword">const</span> <span class="keyword">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dfn[x] &lt; dfn[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">19</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        <span class="keyword">if</span> (dep[f[x][i]] &gt;= d)  x = f[x][i];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] &lt; dep[y])    swap(x, y);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">19</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        <span class="keyword">if</span> (dep[f[x][i]] &gt;= dep[y]) x = f[x][i];</span><br><span class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">19</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        <span class="keyword">if</span> (f[x][i] != f[y][i]) x = f[x][i], y = f[y][i];</span><br><span class="line">    <span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    sz[u] = <span class="number">1</span>;</span><br><span class="line">    dfn[u] = ++ind;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; g[u].size(); ++i) &#123;</span><br><span class="line">        v = g[u][i];</span><br><span class="line">        <span class="keyword">if</span> (v == f[u][<span class="number">0</span>])   <span class="keyword">continue</span>;</span><br><span class="line">        f[v][<span class="number">0</span>] = u;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">19</span>; ++j)   f[v][j] = f[f[v][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">        dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">        dfs(v);</span><br><span class="line">        sz[u] += sz[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line">    sort(h + <span class="number">1</span>, h + m + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!top)   fa[st[++top] = h[i]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> x = lca(st[top], h[i]);</span><br><span class="line">            <span class="keyword">for</span> (; dep[st[top]] &gt; dep[x]; --top)</span><br><span class="line">                <span class="keyword">if</span> (dep[st[top - <span class="number">1</span>]] &lt;= dep[x]) fa[st[top]] = x;</span><br><span class="line">            <span class="keyword">if</span> (st[top] != x) &#123;</span><br><span class="line">                fa[x] = st[top];</span><br><span class="line">                t[++tot] = st[++top] = x;</span><br><span class="line">                near[x] = mp(<span class="number">0x3f3f3f3f</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            fa[st[++top] = h[i]] = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;h[i]);</span><br><span class="line">        t[++tot] = pos[i] = h[i], ans[h[i]] = <span class="number">0</span>, near[h[i]] = mp(<span class="number">0</span>, h[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    build(m);</span><br><span class="line">    sort(t + <span class="number">1</span>, t + tot + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = t[i];</span><br><span class="line">        w[x] = sz[x];</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">1</span>)  dis[x] = dep[x] - dep[fa[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = tot; i &gt; <span class="number">1</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = t[i];</span><br><span class="line">        near[fa[x]] = min(near[fa[x]], mp(near[x].F + dis[x], near[x].S));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= tot; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = t[i];</span><br><span class="line">        near[x] = min(near[x], mp(near[fa[x]].F + dis[x], near[fa[x]].S));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = t[i];</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>) ans[near[x].S] += n - sz[x];</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> rt = find(x, dep[fa[x]] + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> sum = sz[rt] - sz[x];</span><br><span class="line">            w[fa[x]] -= sz[rt];</span><br><span class="line">            <span class="keyword">if</span> (near[fa[x]].S == near[x].S) ans[near[x].S] += sum;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> mid = dep[x] - (near[fa[x]].F - near[x].F + dis[x]) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> ((near[fa[x]].F + near[x].F + dis[x]) % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; near[fa[x]].S &lt; near[x].S) ++mid;</span><br><span class="line">                <span class="keyword">int</span> tmp = sz[find(x, mid)] - sz[x];</span><br><span class="line">                ans[near[fa[x]].S] += sum - tmp;</span><br><span class="line">                ans[near[x].S] += tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i)  ans[near[t[i]].S] += w[t[i]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)    <span class="built_in">printf</span>(<span class="string">"%d "</span>, ans[pos[i]]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        g[u].pb(v), g[v].pb(u);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(dep[<span class="number">1</span>] = <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">    <span class="keyword">while</span> (q--) work();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    gao();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_1/collectPlayer.swf" type="application/x-shockwave-flash" wi]]>
    </summary>
    
      <category term="bzoj题解" scheme="http://mlz000.github.io/categories/bzoj%E9%A2%98%E8%A7%A3/"/>
    
      <category term="虚树" scheme="http://mlz000.github.io/categories/bzoj%E9%A2%98%E8%A7%A3/%E8%99%9A%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[srm 555]]></title>
    <link href="http://mlz000.github.io/2015/11/23/srm-555/"/>
    <id>http://mlz000.github.io/2015/11/23/srm-555/</id>
    <published>2015-11-23T07:45:34.000Z</published>
    <updated>2015-11-24T13:39:40.394Z</updated>
    <content type="html"><![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" width="235" height="346" wmode="opaque">


<h1 id="255">255</h1><p><hr></p>
<h2 id="Description">Description</h2><p>问能将一个$0/1$串最少分成几个串使得每个串都是$5$的整数次幂，且没有前导零</p>
<h2 id="Solution">Solution</h2><p>dp即可，$dp[i]$表示前$i$个字符分割的结果，枚举一个分割点$j$，$check$即可</p>
<h2 id="Code"><a href="https://github.com/mlz000/topcoder/blob/master/srm555/255.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">55</span>;</span><br><span class="line"><span class="keyword">int</span> dp[N];</span><br><span class="line"><span class="keyword">struct</span> CuttingBitString &#123;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ok</span><span class="params">(LL x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (x &amp;&amp; x % <span class="number">5</span> == <span class="number">0</span>) x /= <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">return</span> x == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getmin</span><span class="params">(<span class="built_in">string</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> s = <span class="string">"0"</span> + S + <span class="string">"1"</span>;</span><br><span class="line">        <span class="keyword">int</span> n = s.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)    dp[i] = <span class="number">10000</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i - <span class="number">1</span>; ++j) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dp[j] == <span class="number">10000</span> || s[j + <span class="number">1</span>] == <span class="string">'0'</span>)  <span class="keyword">continue</span>;</span><br><span class="line">                    LL now = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt;= i - <span class="number">1</span>; ++k)    now = now * <span class="number">2</span> + (s[k] == <span class="string">'1'</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">if</span> (ok(now))    dp[i - <span class="number">1</span>] = min(dp[i - <span class="number">1</span>], dp[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">2</span>] == <span class="number">10000</span> ? -<span class="number">1</span> : dp[n - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="555">555</h1><p><hr></p>
<h2 id="Description-1">Description</h2><p>有一个$H*W$的全$0$矩阵，给定对行列操作数，每次操作将行列$0/1$翻转，使得最后矩阵$1$的个数为$S$,求方案数<br>两个方案不同当且仅当有一行或列操作数不同</p>
<h2 id="Solution-1">Solution</h2><p>很容易想到操作两次相当于没操作，枚举行列分别操作$1$次的个数，剩下的相当于$n$个物品(n对操作两次)放到$m$个不同盒子的方案数，即$\binom{n+m-1}{n}$，统计即可</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/topcoder/blob/master/srm555/555.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1600</span>, M = <span class="number">555555555</span>;</span><br><span class="line"><span class="keyword">int</span> c[N &lt;&lt; <span class="number">1</span>][N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">struct</span> XorBoard &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> H, <span class="keyword">int</span> W, <span class="keyword">int</span> Rcount, <span class="keyword">int</span> Ccount, <span class="keyword">int</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1555</span> * <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            c[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; ++j)    c[i][j] = (c[i - <span class="number">1</span>][j] + c[i - <span class="number">1</span>][j - <span class="number">1</span>]) % M;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= Rcount &amp;&amp; i &lt;= H; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= Ccount &amp;&amp; j &lt;= W; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i * W + j * H - <span class="number">2</span> * i * j != S) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> ((Rcount - i) &amp; <span class="number">1</span> || (Ccount - j) &amp; <span class="number">1</span>)   <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">int</span> rl = (Rcount - i) / <span class="number">2</span>, cl = (Ccount - j) / <span class="number">2</span>;</span><br><span class="line">                (ans += (LL)c[rl + H - <span class="number">1</span>][rl] * c[H][i] % M * c[cl + W - <span class="number">1</span>][cl] % M * c[W][j] % M) %= M;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" wi]]>
    </summary>
    
      <category term="topcoder题解" scheme="http://mlz000.github.io/categories/topcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[bzoj 3926 [Zjoi2015]诸神眷顾的幻想乡]]></title>
    <link href="http://mlz000.github.io/2015/11/19/bzoj-3926-Zjoi2015-%E8%AF%B8%E7%A5%9E%E7%9C%B7%E9%A1%BE%E7%9A%84%E5%B9%BB%E6%83%B3%E4%B9%A1/"/>
    <id>http://mlz000.github.io/2015/11/19/bzoj-3926-Zjoi2015-诸神眷顾的幻想乡/</id>
    <published>2015-11-19T08:32:04.000Z</published>
    <updated>2015-11-23T07:46:23.782Z</updated>
    <content type="html"><![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" width="235" height="346" wmode="opaque">

<h2 id="Descripiton">Descripiton</h2><p>给定一棵树，每个节点有一个字符，求从一个节点出发沿最短路径走到另一个节点所构成的字符串一共有多少种<br>注意：叶子数$\le$20</p>
<h2 id="Solution">Solution</h2><p>这个题，发现叶子数很少就很好做了，以每个叶子为根节点建立SAM即可，这样原树上所有路径都在SAM出现过,统计即可。</p>
<h2 id="Code"><a href="https://github.com/mlz000/bzoj/blob/master/3926(SAM).cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100005</span> * <span class="number">2</span> * <span class="number">20</span>, M = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">struct</span> SAM &#123;</span><br><span class="line">    <span class="keyword">int</span> tot, last, step[N], g[N], par[N], son[N][M], cnt[N], Q[N], ch[N], f[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(par, <span class="number">0</span>, <span class="keyword">sizeof</span>(par));</span><br><span class="line">        par[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(son, <span class="number">0</span>, <span class="keyword">sizeof</span>(son));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> last, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p = last, np = ++tot;</span><br><span class="line">        step[np] = step[p] + <span class="number">1</span>, last = np, ++g[np];<span class="comment">//right</span></span><br><span class="line">        ch[np] = x;</span><br><span class="line">        <span class="keyword">for</span> (; !son[p][x] &amp;&amp; ~p; p = par[p])    son[p][x] = np;</span><br><span class="line">        <span class="keyword">if</span> (p == -<span class="number">1</span>)    <span class="keyword">return</span> np;</span><br><span class="line">        <span class="keyword">int</span> q = son[p][x];</span><br><span class="line">        <span class="keyword">if</span> (step[q] == step[p] + <span class="number">1</span>) par[np] = q;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            step[++tot] = step[p] + <span class="number">1</span>;</span><br><span class="line">            ch[tot] = x;</span><br><span class="line">            <span class="keyword">int</span> nq = tot;</span><br><span class="line">            <span class="built_in">memcpy</span>(son[nq], son[q], <span class="keyword">sizeof</span>(son[q]));</span><br><span class="line">            par[nq] = par[q];</span><br><span class="line">            par[np] = par[q] = nq;</span><br><span class="line">            <span class="keyword">for</span> (; son[p][x] == q &amp;&amp; ~p; p = par[p])    son[p][x] = nq;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> np;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">topo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i)    ++cnt[step[i]];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i)    cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i)    Q[cnt[step[i]]--] = i;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LL <span class="title">gao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LL ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i)  ans += step[i] - step[par[i]];<span class="comment">//i状态表示多少个字符串</span></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;S;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100005</span>], d[<span class="number">100005</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = S.add(last, a[u]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g[u].size(); ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = g[u][i];</span><br><span class="line">        <span class="keyword">if</span> (v == fa)    <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v, u, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    S.init();</span><br><span class="line">    <span class="keyword">int</span> n, c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;c);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        g[u].pb(v), g[v].pb(u);</span><br><span class="line">        ++d[u], ++d[v];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (d[i] == <span class="number">1</span>)  dfs(i, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, S.gao());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" wi]]>
    </summary>
    
      <category term="bzoj题解" scheme="http://mlz000.github.io/categories/bzoj%E9%A2%98%E8%A7%A3/"/>
    
      <category term="SAM" scheme="http://mlz000.github.io/categories/bzoj%E9%A2%98%E8%A7%A3/SAM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[bzoj 3998 [TJOI2015]弦论]]></title>
    <link href="http://mlz000.github.io/2015/11/19/bzoj-3998-TJOI2015-%E5%BC%A6%E8%AE%BA/"/>
    <id>http://mlz000.github.io/2015/11/19/bzoj-3998-TJOI2015-弦论/</id>
    <published>2015-11-19T06:56:49.000Z</published>
    <updated>2015-11-22T08:46:00.788Z</updated>
    <content type="html"><![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" width="235" height="346" wmode="opaque">

<h2 id="先扯几句">先扯几句</h2><p>昨天tc怎么都上不去，突然想再补补姿势，然后发现SAM这个东西理解的很不到位，花了一晚上重新理解了一下，做了下题来回顾下&gt;_&lt;_</p>
<h2 id="Description">Description</h2><p>对于一个给定长度为$N$的字符串，求它的第$K$小子串是什么<br>第二行为两个整数$T$和$K$，$T$为$0$则表示不同位置的相同子串算作一个<br>$T=1$则表示不同位置的相同子串算作多个,$K$的意义如题所述。<br>$k\le 5*10^5,N\le 10^9$</p>
<h2 id="Solution">Solution</h2><p>很容易想到用SAM做，$T=1$正常做，$T=0$时考虑right数组的意义，把right数组都赋值为1，拓扑排序处理下即可<br>最后$dfs$或者非递归处理一下即可</p>
<h2 id="Code"><a href="https://github.com/mlz000/bzoj/blob/master/3998(SAM).cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500005</span> * <span class="number">2</span>, M = <span class="number">26</span>;</span><br><span class="line"><span class="keyword">struct</span> SAM &#123;</span><br><span class="line">    <span class="keyword">int</span> tot, last, step[N], g[N], par[N], son[N][M], cnt[N], Q[N], ch[N], f[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tot = last = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(par, <span class="number">0</span>, <span class="keyword">sizeof</span>(par));</span><br><span class="line">        par[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(son, <span class="number">0</span>, <span class="keyword">sizeof</span>(son));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p = last, np = ++tot;</span><br><span class="line">        step[np] = step[p] + <span class="number">1</span>, last = np, ++g[np];<span class="comment">//right</span></span><br><span class="line">        ch[np] = x;</span><br><span class="line">        <span class="keyword">for</span> (; !son[p][x] &amp;&amp; ~p; p = par[p])    son[p][x] = np;</span><br><span class="line">        <span class="keyword">if</span> (p == -<span class="number">1</span>)    <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> q = son[p][x];</span><br><span class="line">        <span class="keyword">if</span> (step[q] == step[p] + <span class="number">1</span>) par[np] = q;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            step[++tot] = step[p] + <span class="number">1</span>;</span><br><span class="line">            ch[tot] = x;</span><br><span class="line">            <span class="keyword">int</span> nq = tot;</span><br><span class="line">            <span class="built_in">memcpy</span>(son[nq], son[q], <span class="keyword">sizeof</span>(son[q]));</span><br><span class="line">            par[nq] = par[q];</span><br><span class="line">            par[np] = par[q] = nq;</span><br><span class="line">            <span class="keyword">for</span> (; son[p][x] == q &amp;&amp; ~p; p = par[p])    son[p][x] = nq;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">topo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i)    ++cnt[step[i]];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i)    cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i)    Q[cnt[step[i]]--] = i;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">gao</span><span class="params">(<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = tot; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(t == <span class="number">0</span>)  g[Q[i]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> g[par[Q[i]]] += g[Q[i]];</span><br><span class="line">            f[Q[i]] = g[Q[i]];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; ++j)</span><br><span class="line">                f[Q[i]] += f[son[Q[i]][j]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;S;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">    S.init();</span><br><span class="line">    <span class="keyword">int</span> l = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; ++i) S.add(s[i] - <span class="string">'a'</span>);</span><br><span class="line">    S.topo();</span><br><span class="line">    <span class="keyword">int</span> t, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;t, &amp;k);</span><br><span class="line">    S.gao(t);</span><br><span class="line">    <span class="keyword">int</span> rt = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">        sum += S.f[S.son[<span class="number">0</span>][i]];</span><br><span class="line">    <span class="keyword">if</span> (k &gt; sum)    <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (k) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">                <span class="keyword">if</span> (S.son[rt][i]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (S.f[S.son[rt][i]] &gt;= k) &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%c"</span>, <span class="string">'a'</span> + i);</span><br><span class="line">                        k -= S.g[S.son[rt][i]];</span><br><span class="line">                        rt = S.son[rt][i];</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> k -= S.f[S.son[rt][i]];</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" wi]]>
    </summary>
    
      <category term="bzoj题解" scheme="http://mlz000.github.io/categories/bzoj%E9%A2%98%E8%A7%A3/"/>
    
      <category term="SAM" scheme="http://mlz000.github.io/categories/bzoj%E9%A2%98%E8%A7%A3/SAM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[srm 554]]></title>
    <link href="http://mlz000.github.io/2015/11/18/srm-554/"/>
    <id>http://mlz000.github.io/2015/11/18/srm-554/</id>
    <published>2015-11-18T07:37:00.000Z</published>
    <updated>2015-11-19T07:00:51.731Z</updated>
    <content type="html"><![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" width="235" height="346" wmode="opaque">

<h1 id="250">250</h1><p><hr></p>
<h2 id="Description">Description</h2><p>给高度为$h_1$的棍子$r_1$个，$h_2$的$r_2$个，轮流放，问最多放出多少种不同的高度</p>
<h2 id="Solution">Solution</h2><p>考虑$h_1$是否等于$h_2$，再讨论即可</p>
<h2 id="Code"><a href="https://github.com/mlz000/topcoder/blob/master/srm554/250.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">struct</span> TheBrickTowerEasyDivOne &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> r1, <span class="keyword">int</span> h1, <span class="keyword">int</span> r2, <span class="keyword">int</span> h2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (h1 == h2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span> * min(r1, r2) + (r1 == r2 ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span> * min(r1, r2) + (r1 &gt; r2) + min(r1, r2) + (r2 &gt; r1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="500">500</h1><p><hr></p>
<h2 id="Description-1">Description</h2><p>将$n$个数重新排列，使得相邻两个数最大值之和尽量小，同时字典序最小。</p>
<h2 id="Solution-1">Solution</h2><p>$n$个数算$n-1$的最大值，很显然尽量小的情况是除了最小值所有值都被计算过一次。观察可得，序列应该是先递减再递增的，按字典序排即可。</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/topcoder/blob/master/srm554/500.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; s;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="keyword">struct</span> TheBrickTowerMediumDivOne &#123;</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; find(<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; a) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = a.size();</span><br><span class="line">        ans.pb(<span class="number">0</span>), vis[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> p = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!vis[j] &amp;&amp; a[j] &lt;= a[ans[i - <span class="number">1</span>]]) &#123;</span><br><span class="line">                    p = j;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (~p) ans.pb(p), vis[p] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (!vis[i])    s.pb(mp(a[i], i));</span><br><span class="line">        sort(s.begin(), s.end());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i)  ans.pb(s[i].S);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" wi]]>
    </summary>
    
      <category term="topcoder题解" scheme="http://mlz000.github.io/categories/topcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015区域赛总结]]></title>
    <link href="http://mlz000.github.io/2015/11/12/2015%E5%8C%BA%E5%9F%9F%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
    <id>http://mlz000.github.io/2015/11/12/2015区域赛总结/</id>
    <published>2015-11-12T06:35:32.000Z</published>
    <updated>2015-11-18T07:41:17.256Z</updated>
    <content type="html"><![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" width="235" height="346" wmode="opaque">



<p>之前一个月打了三场比赛，CCPC，沈阳和合肥。总体来说成绩比较满意吧，两银一金，但还是有很多遗憾</p>
<p>CCPC是技不如人，$F$题不会做</p>
<p>沈阳侥幸拿金，$G$那个$sb$题由于是手推公式调到死精度过不去，赛后改二分解方程就秒了</p>
<p>最遗憾的是合肥，自己上来把$H$题$k=2$的情况构造好了，结果忘了$k$可以等于$3$这种更trival的情况，坑了无数罚时，对不起队友QvQ</p>
<p>最后$A$题$cdq+NTT$的题，最后没有调对，由于自己最后时候写的有点紧张导致写了好多$SB$错误，以及原根求错了= =b(卜是窝的锅23333~)</p>
<p>讲道理的话，之前$SB$题不坑，省下来的时间，我$A$肯定可以调对的= =，菜是原罪。。坑了队友，最后拿了银牌第二，我的锅</p>
<p>这几场比赛暴露了好多问题，也幸好沈阳侥幸拿了金，不然合肥真是遗憾死了</p>
<p>感谢队友cpc,syx,大腿带窝飞，没有嫌弃窝坑了他们&gt;_&lt;，如果过段时间有时间或者心情或许会详细总结一下吧，接下来可以好好休息一段时间，补补姿势，调整调整状态，$EC-final$见！希望能有个好成绩~</p>
]]></content>
    <summary type="html">
    <![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" wi]]>
    </summary>
    
      <category term="随笔" scheme="http://mlz000.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[srm 553]]></title>
    <link href="http://mlz000.github.io/2015/11/12/srm-553/"/>
    <id>http://mlz000.github.io/2015/11/12/srm-553/</id>
    <published>2015-11-12T06:23:22.000Z</published>
    <updated>2015-11-12T06:45:38.937Z</updated>
    <content type="html"><![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" width="235" height="346" wmode="opaque">

<h1 id="250">250</h1><hr>

<h2 id="Solution">Solution</h2><p>把$-1$分别替换为$0,1,2$来判断答案是否变化即可。简单粗暴</p>
<h2 id="Code"><a href="https://github.com/mlz000/topcoder/blob/master/srm553/250.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="function">LL <span class="title">gao</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;LL&gt; S;</span><br><span class="line">    <span class="keyword">int</span> n = a.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i)   S.push(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!a[i]) &#123;</span><br><span class="line">            LL x = S.top();</span><br><span class="line">            S.pop();</span><br><span class="line">            LL y = S.top();</span><br><span class="line">            S.pop();</span><br><span class="line">            S.push(x + y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> S.push(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> S.top();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> Suminator &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMissing</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; a, <span class="keyword">int</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = a.size();</span><br><span class="line">        <span class="keyword">int</span> p;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) </span><br><span class="line">            <span class="keyword">if</span> (a[i] == -<span class="number">1</span>) p = i;</span><br><span class="line">        a[p] = <span class="number">0</span>;</span><br><span class="line">        LL t = gao(a);</span><br><span class="line">        <span class="keyword">if</span> (t == S) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        a[p] = <span class="number">1</span>;</span><br><span class="line">        LL u = gao(a);</span><br><span class="line">        a[p] = <span class="number">2</span>;</span><br><span class="line">        LL v = gao(a);</span><br><span class="line">        <span class="keyword">if</span> (u == v) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (u &lt;= S) <span class="keyword">return</span> S - u + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="500">500</h1><p><hr></p>
<h2 id="Description">Description</h2><p>求将地图染成$2$个凸连通块的方案数</p>
<h2 id="Solution-1">Solution</h2><p>这是道比较有趣的题，首先发现，如果有一段连续的格子被染成同一颜色，在以后的行上，被同色染的格子数一定非递增或非递减，且会确定以后行的状态。于是可以$dp$，大概就是$dp$到第$i$行连续$j$个格子被染成同一颜色，当前状态是非递增还是非递减还是尚未确定。$记忆化搜索可能好写一点$。</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/topcoder/blob/master/srm553/500.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;<span class="comment">//dp</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">55</span>, M = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> dp[N][N][<span class="number">3</span>][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">bool</span> bw[N][N], wb[N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> dir, <span class="keyword">int</span> ok1, <span class="keyword">int</span> ok2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y == m &amp;&amp; dir == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ok1 + ok2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> &amp;t = dp[x][y][dir][ok1][ok2];</span><br><span class="line">    <span class="keyword">if</span> (~t) <span class="keyword">return</span> t;</span><br><span class="line">    t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num = <span class="number">0</span>; num &lt;= m; ++num) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dir == <span class="number">0</span> &amp;&amp; num &lt; y || dir == <span class="number">1</span> &amp;&amp; num &gt; y) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> ndir = dir;</span><br><span class="line">        <span class="keyword">if</span> (dir == <span class="number">2</span> &amp;&amp; num &lt; y)    ndir = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (dir == <span class="number">2</span> &amp;&amp; num &gt; y)    ndir = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span>) ndir = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (y == m &amp;&amp; num == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> t1 = ok1, t2 = ok2;</span><br><span class="line">        <span class="keyword">if</span> (!bw[x][num])    t1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (!wb[x][num])    t2 = <span class="number">0</span>;</span><br><span class="line">        (t += f(x + <span class="number">1</span>, num, ndir, t1, t2)) %= M;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> TwoConvexShapes &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countWays</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; grid)</span> </span>&#123;</span><br><span class="line">        n = grid.size(), m = grid[<span class="number">0</span>].size();</span><br><span class="line">        <span class="built_in">memset</span>(dp, -<span class="number">1</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">                bw[i][j] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; j; ++k)</span><br><span class="line">                    <span class="keyword">if</span> (grid[i][k] == <span class="string">'W'</span>)  bw[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = j; k &lt; m; ++k)</span><br><span class="line">                    <span class="keyword">if</span> (grid[i][k] == <span class="string">'B'</span>)  bw[i][j] = <span class="number">0</span>;</span><br><span class="line">                wb[i][j] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; j; ++k)</span><br><span class="line">                    <span class="keyword">if</span> (grid[i][k] == <span class="string">'B'</span>)  wb[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = j; k &lt; m; ++k)</span><br><span class="line">                    <span class="keyword">if</span> (grid[i][k] == <span class="string">'W'</span>)  wb[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        (ans += f(<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)) %= M;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" wi]]>
    </summary>
    
      <category term="topcoder题解" scheme="http://mlz000.github.io/categories/topcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[srm 552]]></title>
    <link href="http://mlz000.github.io/2015/10/20/srm-552/"/>
    <id>http://mlz000.github.io/2015/10/20/srm-552/</id>
    <published>2015-10-20T13:16:22.000Z</published>
    <updated>2015-11-12T06:24:40.942Z</updated>
    <content type="html"><![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" width="235" height="346" wmode="opaque">


<h1 id="250">250</h1><p><hr></p>
<h2 id="Description">Description</h2><p>定义大小为$N$的三角形, 是由若干个等大的圆形构成的, 高度和底宽为$N$,三角形的每个圆染三种颜色$r,g,b$,相接触的圆不能染同种颜色,问有$R$个$r$颜色的球, $G$个$g$颜色的球和$B$个$b$颜色的球, 最多能染多少个大小为$N$的三角形</p>
<h2 id="Solution">Solution</h2><p>稍加分析可以发现，每个三角形三个颜色的球要不是$x,x,x$,要不是$x,x,x+1$这种形式。先考虑$mod3=0$的情况，直接计算即可，$mod3=1$时，先当他们都相同，二分答案，然后check一下多出来的是否可以多出个数。</p>
<h2 id="Code"><a href="https://github.com/mlz000/topcoder/blob/master/srm552/250.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="built_in">vector</span>&lt;LL&gt; a;</span><br><span class="line"><span class="keyword">struct</span> FoxPaintingBalls &#123;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">theMax</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> R, <span class="keyword">long</span> <span class="keyword">long</span> G, <span class="keyword">long</span> <span class="keyword">long</span> B, <span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (N == <span class="number">1</span>) <span class="keyword">return</span> R + G + B;</span><br><span class="line">        a.pb(R), a.pb(G), a.pb(B);</span><br><span class="line">        sort(a.begin(), a.end());</span><br><span class="line">        LL tot = (LL)N * (N + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        LL x = tot / <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> (tot % <span class="number">3</span> == <span class="number">0</span>) <span class="keyword">return</span> a[<span class="number">0</span>] / x;</span><br><span class="line">        LL ll = <span class="number">0</span>, ans = <span class="number">0</span>, rr = a[<span class="number">0</span>] / x;</span><br><span class="line">        <span class="keyword">while</span> (ll &lt;= rr) &#123;</span><br><span class="line">            LL mid = (ll + rr) &gt;&gt; <span class="number">1l</span>l;</span><br><span class="line">            LL r = R - mid * x, g = G - mid * x, b = B - mid * x;</span><br><span class="line">            <span class="keyword">if</span> (r + g + b &gt;= mid) &#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                ll = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> rr = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="500">500</h1><p><hr></p>
<h2 id="Description-1">Description</h2><p>大小为$n\times m(n,m&lt;30)$的矩阵, 有$L,P,.,$三种格子, 画两个互不相交的矩形, 使两个矩形$L$和$P$的差不超过$D$, 问这两个矩形最多能包含的$L$和$P$的和。</p>
<h2 id="Solution-1">Solution</h2><p>考虑一定存在一个分界线将其分为两个矩阵，先暴力$N^6$处理所有分界线，比如$l[i][j]表示第i列左边差为j的最大的花的和$，然后枚举两个矩形内部的差，再枚举分界线，暴力$N^5$计算即可。</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/topcoder/blob/master/srm552/500.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;<span class="comment">//enum</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">35</span>;</span><br><span class="line"><span class="keyword">int</span> L[N][N * N + <span class="number">1000</span>], R[N][N * N + <span class="number">1000</span>], D[N][N * N + <span class="number">1000</span>], U[N][N * N + <span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">gao</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; y)  x = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> FoxAndFlowerShopDivOne &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">theMaxFlowers</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; s, <span class="keyword">int</span> maxDiff)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(L, <span class="number">0xc0</span>, <span class="keyword">sizeof</span>(L));</span><br><span class="line">        <span class="built_in">memset</span>(R, <span class="number">0xc0</span>, <span class="keyword">sizeof</span>(R));</span><br><span class="line">        <span class="built_in">memset</span>(U, <span class="number">0xc0</span>, <span class="keyword">sizeof</span>(U));</span><br><span class="line">        <span class="built_in">memset</span>(D, <span class="number">0xc0</span>, <span class="keyword">sizeof</span>(D));</span><br><span class="line">        <span class="keyword">int</span> n = s.size(), m = s[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) </span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt; n; ++k)</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> l = j; l &lt; m; ++l) &#123;</span><br><span class="line">                        <span class="keyword">int</span> suml = <span class="number">0</span>, sump = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> p = i; p &lt;= k; ++p)</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">int</span> q = j; q &lt;= l; ++q) &#123;</span><br><span class="line">                                suml += s[p][q] == <span class="string">'L'</span>;</span><br><span class="line">                                sump += s[p][q] == <span class="string">'P'</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        <span class="keyword">int</span> sum = suml + sump, dif = suml - sump + <span class="number">1000</span>;</span><br><span class="line">                        gao(D[i][dif], sum);</span><br><span class="line">                        gao(R[j][dif], sum);</span><br><span class="line">                        gao(U[k][dif], sum);</span><br><span class="line">                        gao(L[l][dif], sum);</span><br><span class="line">                    &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N * N + <span class="number">1000</span>; ++j)</span><br><span class="line">                U[i][j] = max(U[i][j], U[i - <span class="number">1</span>][j]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N * N + <span class="number">1000</span>; ++j)</span><br><span class="line">                D[i][j] = max(D[i][j], D[i + <span class="number">1</span>][j]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; m; ++j)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; N * N + <span class="number">1000</span>; ++k)</span><br><span class="line">                L[j][k] = max(L[j][k], L[j - <span class="number">1</span>][k]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = m - <span class="number">2</span>; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; N * N + <span class="number">1000</span>; ++k)</span><br><span class="line">                R[j][k] = max(R[j][k], R[j + <span class="number">1</span>][k]);</span><br><span class="line">        <span class="keyword">int</span> ans = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = -n * m; i &lt;= n * m; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = -n * m; j &lt;= n * m; ++j) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; n - <span class="number">1</span>; ++h) </span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">abs</span>(i + j) &lt;= maxDiff)  ans = max(ans, U[h][i + <span class="number">1000</span>] + D[h + <span class="number">1</span>][j + <span class="number">1000</span>]);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; m - <span class="number">1</span>; ++l)</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">abs</span>(i + j) &lt;= maxDiff)  ans = max(ans, L[l][i + <span class="number">1000</span>] + R[l + <span class="number">1</span>][j + <span class="number">1000</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" wi]]>
    </summary>
    
      <category term="topcoder题解" scheme="http://mlz000.github.io/categories/topcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[srm 551]]></title>
    <link href="http://mlz000.github.io/2015/10/12/srm-551/"/>
    <id>http://mlz000.github.io/2015/10/12/srm-551/</id>
    <published>2015-10-12T07:56:19.000Z</published>
    <updated>2015-10-20T13:15:44.429Z</updated>
    <content type="html"><![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" width="235" height="346" wmode="opaque">

<h1 id="250">250</h1><p><hr></p>
<h2 id="Description">Description</h2><p>题意：一个长度最多$50$的字符串，每次操作可以交换相邻的两个字符，问，经过最多$MaxSwaps$次交换之后，最多能让多少个相同的字符连起来</p>
<h2 id="Solution">Solution</h2><p>枚举一个字符，让其他字符往这里即可，取最小即可</p>
<h2 id="Code"><a href="https://github.com/mlz000/topcoder/blob/master/srm551/250.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">struct</span> ColorfulChocolates &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maximumSpread</span><span class="params">(<span class="built_in">string</span> chocolates, <span class="keyword">int</span> maxSwaps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = chocolates.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">string</span> s = chocolates;</span><br><span class="line">            <span class="keyword">int</span> now = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">                <span class="keyword">if</span> (s[j] == s[i])   a.pb(i - j - now), ++now;</span><br><span class="line">            now = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; ++j)</span><br><span class="line">                <span class="keyword">if</span> (s[j] == s[i])   a.pb(j - i - now), ++now;</span><br><span class="line">            sort(a.begin(), a.end());</span><br><span class="line">            <span class="keyword">int</span> cnt = maxSwaps;</span><br><span class="line">            <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.size(); ++i)</span><br><span class="line">                <span class="keyword">if</span> (cnt - a[i] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    cnt -= a[i];</span><br><span class="line">                    ++t;</span><br><span class="line">                &#125;</span><br><span class="line">            ans = max(ans, t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="450">450</h1><p><hr></p>
<h2 id="Description-1">Description</h2><p>一个有向图，顶点标号$0\sim n-1$，每个点会选择优先走他能到达的编号最小的点，现在想通过去掉一些边使得可以从$0$走到$n-1$,求最少要去掉的边数</p>
<h2 id="Solution-1">Solution</h2><p>考虑类似于$floyd$的做法，$d[i][j]$表示$i$走到$j$需要最少删多少条边，直接$dp$即可</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/topcoder/blob/master/srm551/450.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;<span class="comment">//dp</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">55</span>, inf = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">int</span> d[N][N];</span><br><span class="line"><span class="keyword">struct</span> ColorfulWolves &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getmin</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; colormap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = colormap.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (colormap[i][j] == <span class="string">'Y'</span>)  d[i][j] = now++;</span><br><span class="line">                <span class="keyword">else</span> d[i][j] = inf;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                    d[i][j] = min(d[i][j], d[i][k] + d[k][j]);</span><br><span class="line">        <span class="keyword">return</span> d[<span class="number">0</span>][n - <span class="number">1</span>] == inf ? -<span class="number">1</span> : d[<span class="number">0</span>][n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" wi]]>
    </summary>
    
      <category term="topcoder题解" scheme="http://mlz000.github.io/categories/topcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[srm 550]]></title>
    <link href="http://mlz000.github.io/2015/10/10/srm-550/"/>
    <id>http://mlz000.github.io/2015/10/10/srm-550/</id>
    <published>2015-10-10T05:54:53.000Z</published>
    <updated>2015-10-12T08:28:46.075Z</updated>
    <content type="html"><![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" width="235" height="346" wmode="opaque">

<h1 id="300">300</h1><p><hr></p>
<h2 id="Description">Description</h2><p>有个机器人，从某一点出发，他只有碰到地形边缘或者碰到走过的点时才会改变运动方向，然后接着走，现在给出他的运动轨迹，判断他的运动是否合法，如果合法的话，那么整个地形的最小面积是多少。每次走的步数$\le 50$</p>
<h2 id="Solution">Solution</h2><p>先确定最大的最小的$x,y$,然后进行验证，如果走到重复的地方或者不应该转弯时转弯则不合法。</p>
<h2 id="Code"><a href="https://github.com/mlz000/topcoder/blob/master/srm550/300.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">int</span> dx[] = &#123;<span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[] = &#123;<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">205</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[N][N];</span><br><span class="line"><span class="keyword">struct</span> RotatingBot &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minArea</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; moves)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = moves.size();</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">100</span>, y = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> mxx = <span class="number">100</span>, mxy = <span class="number">100</span>, mnx = <span class="number">100</span>, mny = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> dir = i % <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">int</span> tx = x + dx[dir] * moves[i];</span><br><span class="line">            <span class="keyword">int</span> ty = y + dy[dir] * moves[i];</span><br><span class="line">            mxx = max(mxx, tx), mnx = min(mnx, tx);</span><br><span class="line">            mxy = max(mxy, ty), mny = min(mny, ty);</span><br><span class="line">            x = tx, y = ty;</span><br><span class="line">        &#125;</span><br><span class="line">        x = <span class="number">100</span>, y = <span class="number">100</span>;</span><br><span class="line">        vis[x][y] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (mxx &gt; <span class="number">151</span> || mxy &gt; <span class="number">151</span> || mnx &lt; <span class="number">49</span>|| mxy &lt; <span class="number">49</span>)  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">151</span>; ++i) &#123;</span><br><span class="line">            vis[i][mxy + <span class="number">1</span>] = vis[i][mny - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            vis[mxx + <span class="number">1</span>][i] = vis[mnx - <span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> dir = i % <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; moves[i]; ++j) &#123;</span><br><span class="line">                <span class="keyword">int</span> tx = x + dx[dir];</span><br><span class="line">                <span class="keyword">int</span> ty = y + dy[dir];</span><br><span class="line">                <span class="keyword">if</span> (vis[tx][ty])    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                vis[tx][ty] = <span class="number">1</span>;</span><br><span class="line">                x = tx, y = ty;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i != n - <span class="number">1</span> &amp;&amp; !vis[x + dx[dir]][y + dy[dir]])   <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (mxx - mnx + <span class="number">1</span>) * (mxy - mny + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="500">500</h1><p><hr></p>
<h2 id="Description-1">Description</h2><p>两个人在一个无限大的格子里轮流涂红蓝两色，第一个人先在$(0,0)$涂红，然后接下来的每一轮，对于所有的点$(x,y)$，如果$(x-1,y-1)$和$(x-2,y)$一个有另一个人的颜色，一个为空，那么就把这个点涂成自己的颜色，问经过$t$轮之后，某个区域的染色情况。</p>
<h2 id="Solution-1">Solution</h2><p>将前几轮的情况手画一下，是下图这个样子的。。<br><img src="http://i13.tietuku.com/337844adf1bed019.jpg" alt=""><br>容易发现只有在$y\le x$这些格子才会被染色，然后发现按$y=-x+b$来看，奇数的没有被染色，偶数的有被染色的。且非常类似杨辉三角，其实杨辉三角奇数项才会被染色。这里有个神奇的结论$c[n][m]为奇数时当且仅当(n \&amp; m) == m$，于是就做完了QvQ</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/topcoder/blob/master/srm550/500.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;<span class="comment">//conclusion</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">struct</span> CheckerExpansion &#123;</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; resultAfter(<span class="keyword">long</span> <span class="keyword">long</span> t, <span class="keyword">long</span> <span class="keyword">long</span> x0, <span class="keyword">long</span> <span class="keyword">long</span> y0, <span class="keyword">int</span> w, <span class="keyword">int</span> h) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h; ++i) &#123;</span><br><span class="line">            <span class="built_in">string</span> s = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; w; ++j) &#123;</span><br><span class="line">                LL x = x0 + j;</span><br><span class="line">                LL y = y0 + h - i - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (y &gt; x) &#123;</span><br><span class="line">                    s += <span class="string">"."</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ((x + y) % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    LL n = (x + y) / <span class="number">2</span>;</span><br><span class="line">                    LL m = <span class="built_in">abs</span>(x - n);</span><br><span class="line">                    <span class="keyword">if</span> (n &gt;= t) s += <span class="string">"."</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> ((n &amp; m) == m) &#123;    <span class="comment">//amazing </span></span><br><span class="line">                        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)  s += <span class="string">"B"</span>;</span><br><span class="line">                        <span class="keyword">else</span> s += <span class="string">"A"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> s += <span class="string">"."</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> s += <span class="string">"."</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.pb(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" wi]]>
    </summary>
    
      <category term="topcoder题解" scheme="http://mlz000.github.io/categories/topcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[srm 549]]></title>
    <link href="http://mlz000.github.io/2015/10/10/srm-549/"/>
    <id>http://mlz000.github.io/2015/10/10/srm-549/</id>
    <published>2015-10-10T04:37:02.000Z</published>
    <updated>2015-10-11T08:12:46.121Z</updated>
    <content type="html"><![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" width="235" height="346" wmode="opaque">

<h1 id="250">250</h1><p><hr></p>
<h2 id="Description">Description</h2><p>有两个集合，每个集合有$N(N&lt;50)$个锥面(表示为高$H$和底面半径$R$，均小于$10000$)。要求从集合$1$和集合$2$的笛卡尔积集合中选取最多的元素满足如下性质：</p>
<ul>
<li>(1): Ha / Ra &gt; Hb / Rb</li>
<li>(2): Ra &lt; Rb</li>
</ul>
<h2 id="Solution">Solution</h2><p>很显然的一个二分图匹配</p>
<h2 id="Code"><a href="https://github.com/mlz000/topcoder/blob/master/srm549/250.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">55</span>;</span><br><span class="line"><span class="keyword">int</span> g[N][N], l[N], vis[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">can</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (g[u][i] &amp;&amp; !vis[i]) &#123;</span><br><span class="line">            vis[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (l[i] == -<span class="number">1</span> || can(l[i], m)) &#123;</span><br><span class="line">                l[i] = u;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> PointyWizardHats &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getNumHats</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; th, <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; tr, <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; bh, <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; br)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = th.size(), m = bh.size();</span><br><span class="line">        <span class="built_in">memset</span>(l, -<span class="number">1</span>, <span class="keyword">sizeof</span>(l));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (th[i] * br[j] &gt; tr[i] * bh[j] &amp;&amp; tr[i] &lt; br[j]) g[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">            <span class="keyword">if</span> (can(i, m))  ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="600">600</h1><p><hr></p>
<h2 id="Description-1">Description</h2><p>$A$和$B$博弈。 在$N\times N(N\le 13)$的矩阵上，有一些$H$格子， 一开始每个$H$格子里最多有一枚带权值的硬币。 每次小$B$选一个$H$格子，然后小$A$将硬币任意排列后，将该格子的硬币给小$B$。<br>排列后必须满足如下条件：</p>
<ul>
<li>(1): 每个格子必须有最多一枚硬币，小$B$选的格子可以没有硬币</li>
<li>(2): 每一行，每一列,$H$的个数和硬币的个数之和必须是偶数</li>
</ul>
<p>$B$想获得尽量多的权值，$A$想让对面获得尽量少的权值</p>
<h2 id="Solution-1">Solution</h2><p>观察到，如果$B$能获得$k$个硬币的话，一定获得的是权值最小的$k$的硬币。<br>考虑到$H$格子的情况，其实只有三种</p>
<ul>
<li>(1)：没选择这个格子</li>
<li>(2): 选择了这个格子，下面没有硬币</li>
<li>(3): 选择了这个格子，下面有硬币</li>
</ul>
<p>容易想到三进制压缩，考虑状压dp，用三进制状态表示，用记忆化搜索比较容易实现。枚举当前选择的格子，枚举两种有无硬币的情况即可。</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/topcoder/blob/master/srm549/600.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; g;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">13</span>, inf = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">struct</span> MagicalHats &#123;</span><br><span class="line">    <span class="keyword">int</span> p[N], r[N], c[N], dp[<span class="number">1594323</span>];</span><br><span class="line">    <span class="keyword">int</span> n, m, totcoin, tothat, num;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">gao</span><span class="params">(<span class="keyword">int</span> mask, <span class="keyword">int</span> i, <span class="keyword">int</span> s)</span> </span>&#123;<span class="comment">// 0:not selected 1:no coin 2:has coin</span></span><br><span class="line">        <span class="keyword">return</span> mask + s * p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> mask, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (mask / p[i]) % <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> mask, <span class="keyword">int</span> cocnt, <span class="keyword">int</span> hatcnt, <span class="keyword">int</span> r[], <span class="keyword">int</span> c[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (~dp[mask]) <span class="keyword">return</span> dp[mask];</span><br><span class="line">        <span class="keyword">int</span> &amp;t = dp[mask];</span><br><span class="line">        t = -inf;</span><br><span class="line">        <span class="keyword">if</span> (hatcnt == tothat) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cocnt != totcoin)   <span class="keyword">return</span> t = -inf;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) </span><br><span class="line">                <span class="keyword">if</span> (r[i] &amp; <span class="number">1</span>)   <span class="keyword">return</span> t = -inf;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">                <span class="keyword">if</span> (c[i] &amp; <span class="number">1</span>)   <span class="keyword">return</span> t = -inf;</span><br><span class="line">            <span class="keyword">return</span> t = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tothat; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = g[i].F, y = g[i].S;</span><br><span class="line">            <span class="keyword">int</span> s = get(mask, i);</span><br><span class="line">            <span class="keyword">if</span> (!s) &#123;<span class="comment">//not selected</span></span><br><span class="line">                <span class="keyword">int</span> t1 = -inf, t2 = -inf, state;</span><br><span class="line">                <span class="keyword">if</span> (cocnt &lt; totcoin) &#123;<span class="comment">//has coin</span></span><br><span class="line">                    <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (hatcnt &gt;= num)  cnt = <span class="number">0</span>;</span><br><span class="line">                    state = gao(mask, i, <span class="number">2</span>);</span><br><span class="line">                    r[x] += <span class="number">2</span>;</span><br><span class="line">                    c[y] += <span class="number">2</span>;</span><br><span class="line">                    t1 = dfs(state, cocnt + <span class="number">1</span>, hatcnt + <span class="number">1</span>, r, c) + cnt;</span><br><span class="line">                    r[x] -= <span class="number">2</span>;</span><br><span class="line">                    c[y] -= <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//no coin</span></span><br><span class="line">                ++r[x];</span><br><span class="line">                ++c[y];</span><br><span class="line">                state = gao(mask, i, <span class="number">1</span>);</span><br><span class="line">                t2 = dfs(state, cocnt, hatcnt + <span class="number">1</span>, r, c);</span><br><span class="line">                --r[x];</span><br><span class="line">                --c[y];</span><br><span class="line">                <span class="keyword">if</span> (t1 &lt; <span class="number">0</span>) t = max(t, t2);</span><br><span class="line">                <span class="keyword">if</span> (t2 &lt; <span class="number">0</span>) t = max(t, t1);</span><br><span class="line">                t = max(t, min(t1, t2));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMaximumReward</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; board, <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; coins, <span class="keyword">int</span> numGuesses)</span> </span>&#123;</span><br><span class="line">        p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">13</span>; ++i)    p[i] = p[i - <span class="number">1</span>] * <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">this</span> -&gt; n = board.size(), <span class="keyword">this</span> -&gt; m = board[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="string">'H'</span>) g.pb(mp(i, j));</span><br><span class="line">        <span class="keyword">this</span> -&gt; totcoin = coins.size(), <span class="keyword">this</span> -&gt; tothat = g.size(), <span class="keyword">this</span> -&gt; num = numGuesses;</span><br><span class="line">        <span class="built_in">memset</span>(dp, -<span class="number">1</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">int</span> cnt = dfs(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, r, c);</span><br><span class="line">        sort(coins.begin(), coins.end());</span><br><span class="line">        <span class="keyword">if</span> (cnt &lt; <span class="number">0</span>)    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; ++i)   ans += coins[i];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" wi]]>
    </summary>
    
      <category term="topcoder题解" scheme="http://mlz000.github.io/categories/topcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[srm 548]]></title>
    <link href="http://mlz000.github.io/2015/09/30/srm-548/"/>
    <id>http://mlz000.github.io/2015/09/30/srm-548/</id>
    <published>2015-09-30T05:51:05.000Z</published>
    <updated>2015-10-10T05:40:53.544Z</updated>
    <content type="html"><![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" width="235" height="346" wmode="opaque">

<h1 id="250">250</h1><p><hr></p>
<h2 id="Description">Description</h2><p>有$N(N\le 50)$个数，每个数的可变范围是$[max(N-X,1),N+X]$。让这个数列严格递增的最小$X$是多少？</p>
<h2 id="Solution">Solution</h2><p>显然可以二分答案，然后二分一个$x$后，我们可以贪心判断，使得前面的数尽量小给后面数更大的变化空间即可</p>
<h2 id="Code"><a href="https://github.com/mlz000/topcoder/blob/master/srm548/250.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">55</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; h)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = h.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (h[i] - x &gt;= <span class="number">1</span>)  h[i] -= x;</span><br><span class="line">            <span class="keyword">else</span> h[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (h[i] + x &gt; h[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">int</span> t = h[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                h[i] = max(t, h[i] - x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> KingdomAndTrees &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minLevel</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; heights)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">1e9</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (check(mid, heights)) &#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="450">450</h1><p><hr></p>
<h2 id="Description-1">Description</h2><p>有两个$N&lt;50$个面的骰子，每个面的数字是$1\sim X$的唯一某个数。第一个骰子有些面是$0$。现在两个骰子同时投掷，请你把第一个骰子某些为$0$的面写上一些唯一的$1\sim X$的数字，让第一个骰子的胜率尽可能接近$0.5$。</p>
<h2 id="Solution-1">Solution</h2><p>其实就是考虑将一些数插入一些空里，是否能赢得$k$次，容易想到$dp$，$dp[i][j][k]$表示$前i个数放入j个空能否赢k次$。不妨对第二个数组排序，依次处理即可。</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/topcoder/blob/master/srm548/450.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;<span class="comment">//dp</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">55</span>;</span><br><span class="line"><span class="keyword">bool</span> dp[N][N * N];</span><br><span class="line"><span class="keyword">struct</span> KingdomAndDice &#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">newFairness</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; firstDie, <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; secondDie, <span class="keyword">int</span> X)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = firstDie.size();</span><br><span class="line">        <span class="keyword">int</span> now = <span class="number">0</span>, nd = <span class="number">0</span>;</span><br><span class="line">        sort(secondDie.begin(), secondDie.end());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            nd += firstDie[i] == <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                <span class="keyword">if</span> (firstDie[i] &gt; secondDie[j]) ++now;</span><br><span class="line">        &#125;</span><br><span class="line">        secondDie.pb(X + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= nd; ++i)   dp[i][now] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = secondDie[i] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> r = secondDie[i + <span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> cnt = r - l + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                <span class="keyword">if</span> (firstDie[j] &gt;= l &amp;&amp; firstDie[j] &lt;= r)   --cnt;</span><br><span class="line">            cnt = min(cnt, nd);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; ++j)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = nd - <span class="number">1</span>; k &gt;= <span class="number">0</span>; --k)</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt;= n * n; ++p)</span><br><span class="line">                        <span class="keyword">if</span> (dp[k][p] &amp;&amp; p + i + <span class="number">1</span> &lt;= n * n) dp[k + <span class="number">1</span>][p + i + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> ans = now;</span><br><span class="line">        <span class="keyword">double</span> mn = <span class="number">1000000</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= n * n; ++k)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= nd; ++j)   </span><br><span class="line">                <span class="keyword">if</span> (dp[j][k] &amp;&amp; <span class="built_in">abs</span>(n * n - k * <span class="number">2</span>) &lt; mn)    ans = k, mn = <span class="built_in">abs</span>(n * n - k * <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> ans / n / n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" wi]]>
    </summary>
    
      <category term="topcoder题解" scheme="http://mlz000.github.io/categories/topcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[srm 547]]></title>
    <link href="http://mlz000.github.io/2015/09/25/srm-547/"/>
    <id>http://mlz000.github.io/2015/09/25/srm-547/</id>
    <published>2015-09-25T07:50:20.000Z</published>
    <updated>2015-09-30T06:11:17.248Z</updated>
    <content type="html"><![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" width="235" height="346" wmode="opaque">

<h1 id="250">250</h1><p><hr></p>
<h2 id="Description">Description</h2><p>$1\le x\le 10^5, 1\le y\le 10^5,x,y\in N$,给定$w$,随机选$x,y$求$\sum sqrt((x-y)^2+w^2)$的期望</p>
<h2 id="Solution">Solution</h2><p>枚举$x-y$即可，注意细节即可</p>
<h2 id="Code"><a href="https://github.com/mlz000/topcoder/blob/master/srm547/250.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">struct</span> Pillars &#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getExpectedLength</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">double</span> ans = <span class="number">0.0</span>;</span><br><span class="line">         <span class="keyword">if</span> (x &lt; y) swap(x, y);</span><br><span class="line">         <span class="keyword">int</span> del = x - y;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span> - y; d &lt;= <span class="number">0</span>; ++d) &#123;</span><br><span class="line">            ans += (<span class="keyword">double</span>)(y + d) * <span class="built_in">sqrt</span>(<span class="number">1.0</span> * d * d + w * w);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt;= del; ++d) &#123;</span><br><span class="line">            ans += (<span class="keyword">double</span>)y * <span class="built_in">sqrt</span>(<span class="number">1.0</span> * d * d + w * w);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> d = del + <span class="number">1</span>; d &lt; x; ++d) &#123;</span><br><span class="line">            ans += (<span class="keyword">double</span>)(x - d) * <span class="built_in">sqrt</span>(<span class="number">1.0</span> * d * d + w * w);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> ans / x / y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="500">500</h1><p><hr></p>
<h2 id="Description-1">Description</h2><p>给定一个$h\times w(h,w\le 10^6)$的矩阵，数字为别为$0\sim h\times w - 1$，给定一个$sum(sum\le 10^{12})$，求最小面积的子矩形，使得和等于$sum$</p>
<h2 id="Solution-1">Solution</h2><p>考虑面积的上界$s$,$s\times (s-1) / 2\ge sum$，于是得到上界是$10^6$级别的，枚举$n$，复杂度为$N\times logN$,显然是可以接受的。<br>设矩阵最上角为$x$，根据等差数列求和，显然可以列出$x$和$sum$的关系，判断是否满足即可</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/topcoder/blob/master/srm547/500.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">struct</span> RectangularSum &#123;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">minimalArea</span><span class="params">(<span class="keyword">int</span> height, <span class="keyword">int</span> width, <span class="keyword">long</span> <span class="keyword">long</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s;</span><br><span class="line">        <span class="keyword">for</span> (s = <span class="number">1</span>; (LL)s * (s - <span class="number">1</span>) / <span class="number">2</span> &lt;= S; ++s);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1e7</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">1</span>; n &lt;= s &amp;&amp; n &lt;= height; ++n)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">1</span>; n * m &lt;= s &amp;&amp; m &lt;= width; ++m) &#123;</span><br><span class="line">                <span class="keyword">if</span> (S * <span class="number">2</span> % n != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                LL t = S * <span class="number">2</span> / n - (LL)(n - <span class="number">1</span>) * m * width;</span><br><span class="line">                <span class="keyword">if</span> (t &lt; <span class="number">0</span> || t &amp; <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (t % m != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                t = t / m + <span class="number">1</span> - m;</span><br><span class="line">                <span class="keyword">if</span> (t &lt; <span class="number">0</span> || t &amp; <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                t /= <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">int</span> y = t % width, x = t / width;</span><br><span class="line">                <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x + n - <span class="number">1</span> &lt; height &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y + m - <span class="number">1</span> &lt; width)    ans = min(ans, n * m);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> ans == <span class="number">1e7</span> ? -<span class="number">1</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" wi]]>
    </summary>
    
      <category term="topcoder题解" scheme="http://mlz000.github.io/categories/topcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[srm 546]]></title>
    <link href="http://mlz000.github.io/2015/09/24/srm-546/"/>
    <id>http://mlz000.github.io/2015/09/24/srm-546/</id>
    <published>2015-09-24T12:40:35.000Z</published>
    <updated>2015-09-25T08:06:47.381Z</updated>
    <content type="html"><![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" width="235" height="346" wmode="opaque">

<h1 id="250">250</h1><p><hr></p>
<h2 id="Solution">Solution</h2><p>考虑奇偶性，每次定一个可以变成该数的上下界，按二进制位考虑即可</p>
<h2 id="Code"><a href="https://github.com/mlz000/topcoder/blob/master/srm546/250.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">struct</span> KleofasTail &#123;</span><br><span class="line">    <span class="function">LL <span class="title">gao</span><span class="params">(LL x, LL k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k &gt; x)  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (k &lt;= <span class="number">1</span>) <span class="keyword">return</span> x - k + <span class="number">1</span>;</span><br><span class="line">        LL kk = k + (k % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">        LL t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt;= x) &#123;</span><br><span class="line">            t += min(x, kk) - k + <span class="number">1</span>;</span><br><span class="line">            k &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            kk = (kk &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">countGoodSequences</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> K, <span class="keyword">long</span> <span class="keyword">long</span> A, <span class="keyword">long</span> <span class="keyword">long</span> B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gao(B, K) - gao(A - <span class="number">1</span>, K);              </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="500">500</h1><p><hr></p>
<h2 id="Description">Description</h2><p>求满足大于$A(A\le 10^{15})$的且$digit1$至少出现$count1$次，$digit2$至少出现$count2次$的最小的数是多少？<br>$(count1+count2\le 15,digit1,digit2\le 10)$</p>
<h2 id="Solution-1">Solution</h2><p>很容易想到数位$dp$,常见数位$dp$套路，用一个$f$表示当前数是否与最小值相等，还有$cnt1个x1,cnt2个x2$没有用，是否成立。<br>正常转移即可，注意一点，除了$x1,x2,lim,lim+1$以外，其他数是没什么意义的，$dp$即可</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/topcoder/blob/master/srm546/500.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;<span class="comment">//dp</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">16</span>];</span><br><span class="line">LL ans;</span><br><span class="line"><span class="keyword">struct</span> FavouriteDigits &#123;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">bool</span> f, <span class="keyword">int</span> x1, <span class="keyword">int</span> cnt1, <span class="keyword">int</span> x2, <span class="keyword">int</span> cnt2, LL now)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cnt1 &lt;= <span class="number">0</span> &amp;&amp; cnt2 &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                ans = now;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> lim = f ? a[p] : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = lim; i &lt;= <span class="number">9</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (f) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(i == lim || i == x1 || i == x2 || i == lim + <span class="number">1</span>))  <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(i == lim || i == x1 || i == x2))  <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> d1 = cnt1 - (i == x1);</span><br><span class="line">            <span class="keyword">int</span> d2 = cnt2 - (i == x2);</span><br><span class="line">            <span class="keyword">if</span> (!now &amp;&amp; !x1)    d1 = cnt1;</span><br><span class="line">            <span class="keyword">if</span> (dfs(p - <span class="number">1</span>, f &amp; (i == lim), x1, d1, x2, d2, now * <span class="number">10</span> + i))   <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">findNext</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> N, <span class="keyword">int</span> x1, <span class="keyword">int</span> cnt1, <span class="keyword">int</span> x2, <span class="keyword">int</span> cnt2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x1 &gt; x2)    swap(x1, x2), swap(cnt1, cnt2);</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (N) &#123;</span><br><span class="line">            a[p++] = N % <span class="number">10</span>;</span><br><span class="line">            N /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p = max(p, cnt1 + cnt2);</span><br><span class="line">        dfs(p, <span class="number">1</span>, x1, cnt1, x2, cnt2, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" wi]]>
    </summary>
    
      <category term="topcoder题解" scheme="http://mlz000.github.io/categories/topcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[srm 545]]></title>
    <link href="http://mlz000.github.io/2015/09/24/srm-545/"/>
    <id>http://mlz000.github.io/2015/09/24/srm-545/</id>
    <published>2015-09-24T08:35:00.000Z</published>
    <updated>2015-10-11T08:37:18.867Z</updated>
    <content type="html"><![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" width="235" height="346" wmode="opaque">

<h1 id="275">275</h1><p><hr></p>
<h2 id="Description">Description</h2><p>让你构造一个长度为$n$的串，逆序数恰好为$m$且字典序比某字符串$string$大，请构造字典序最小的这样的串。</p>
<h2 id="Solution">Solution</h2><p>数据范围非常小，暴力搜索即可</p>
<h2 id="Code"><a href="https://github.com/mlz000/topcoder/blob/master/srm545/275.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">26</span>;</span><br><span class="line"><span class="built_in">string</span> ans;</span><br><span class="line"><span class="keyword">struct</span> StrIIRec &#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> minInv, <span class="built_in">string</span> minStr, <span class="built_in">set</span>&lt;<span class="keyword">char</span>&gt; S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (minInv &gt; (n - <span class="number">1</span>) * n / <span class="number">2</span>)   <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">string</span>(<span class="number">1</span>, *S.begin());</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (!minStr.size()) minStr = <span class="string">"a"</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">set</span>&lt;<span class="keyword">char</span>&gt;:: iterator it = S.begin(); it != S.end(); it++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (*it &gt;= minStr[<span class="number">0</span>]) &#123;</span><br><span class="line">                <span class="built_in">set</span>&lt;<span class="keyword">char</span>&gt; f = S;</span><br><span class="line">                f.erase(*it);</span><br><span class="line">                <span class="built_in">string</span> t;</span><br><span class="line">                <span class="keyword">if</span> (*it == minStr[<span class="number">0</span>])   t = dfs(n - <span class="number">1</span>, minInv - cnt, <span class="built_in">string</span>(minStr, <span class="number">1</span>), f);</span><br><span class="line">                <span class="keyword">else</span> t = dfs(n - <span class="number">1</span>, minInv - cnt, <span class="string">""</span>, f);</span><br><span class="line">                <span class="keyword">if</span> (t.size())   <span class="keyword">return</span> *it + t;</span><br><span class="line">            &#125;</span><br><span class="line">            ++cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">recovstr</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> minInv, <span class="built_in">string</span> minStr)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">char</span>&gt; S;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)    S.insert(<span class="string">'a'</span> + i);</span><br><span class="line">        <span class="built_in">string</span> ans = dfs(n, minInv, minStr, S);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="500">500</h1><p><hr></p>
<h2 id="Description-1">Description</h2><p> 你可以在$H\times L$的网格上以$(x,0)$为起点画一条非水平的射线，$0\le x\le L$，且为整数。在这个射线上每次要取$k$个整数坐标。问一共可以取得多少个不同的坐标集合$(1\le H,L,K\le 2000)。$</p>
<h2 id="Solution-1">Solution</h2><p>暴力枚举$dx, dy$，当$gcd(dx,dy)=1$的时候这个就相当于枚举斜率啦，然后我们需要枚举$x$,显然枚举会超时，我们考虑只有当$x+=dx,y+=dy$的时候，点数才可能会发生变化，枚举即可。</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/topcoder/blob/master/srm545/500.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2005</span>, M = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> c[N][N];</span><br><span class="line"><span class="keyword">struct</span> Spacetsk &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countsets</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> H, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (K == <span class="number">1</span>) <span class="keyword">return</span> (H + <span class="number">1</span>) * (L + <span class="number">1</span>) % M;</span><br><span class="line">        c[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2001</span>; ++i) &#123;</span><br><span class="line">            c[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; ++j)    c[i][j] = (c[i - <span class="number">1</span>][j] + c[i - <span class="number">1</span>][j - <span class="number">1</span>]) % M;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= L; ++i)    (ans += c[H + <span class="number">1</span>][K]) %= M;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> dx = <span class="number">1</span>; dx &lt;= L; ++dx)</span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">int</span> dy = <span class="number">1</span>; dy &lt;= H; ++dy) &#123;</span><br><span class="line">                <span class="keyword">if</span> (__gcd(dx, dy) == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> sum = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>; x &lt;= L; x += dx, y += dy) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (y &lt;= H) ++cnt;  </span><br><span class="line">                        <span class="keyword">int</span> num = min(dx, L - x + <span class="number">1</span>);</span><br><span class="line">                        (sum += <span class="number">1l</span>l * num * c[cnt][K] % M) %= M;</span><br><span class="line">                    &#125;</span><br><span class="line">                    (ans += sum * <span class="number">2</span> % M) %= M;</span><br><span class="line">                &#125;</span><br><span class="line">             &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" wi]]>
    </summary>
    
      <category term="topcoder题解" scheme="http://mlz000.github.io/categories/topcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[srm 518(有FWT的题QvQ)]]></title>
    <link href="http://mlz000.github.io/2015/09/20/srm-518-%E6%9C%89FWT%E7%9A%84%E9%A2%98QvQ/"/>
    <id>http://mlz000.github.io/2015/09/20/srm-518-有FWT的题QvQ/</id>
    <published>2015-09-20T15:59:06.000Z</published>
    <updated>2015-09-24T08:35:20.441Z</updated>
    <content type="html"><![CDATA[<p><embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" width="235" height="346" wmode="opaque"></p>
<h1 id="250">250</h1><h2 id="Description">Description</h2><p>从一个字符串中找一字典序最大的字串</p>
<h2 id="Solution">Solution</h2><p>从左至右贪心即可</p>
<h1 id="500">500</h1><h2 id="Description-1">Description</h2><p>有一个序列，每次可以将一个数$-1$需要花费$1$的代价，问最后使得序列满足$2a[i]\le a[i-1]+a[i+1]$</p>
<h2 id="Solution-1">Solution</h2><p>因为满足$a[i-1]-a[i]\ge a[i]-a[i+1]$,也就是说序列相邻两项差是递减的，所以每当不满足条件时暴力调整$a[i]$，直到不需要调整为止。想想极限数据调整次数即可直到复杂度是靠谱的。</p>
<h1 id="1000">1000</h1><h2 id="Description-2">Description</h2><p>求符合以下条件的序列个数</p>
<ul>
<li>1:长度为K</li>
<li>2:每个元素大小不超过L</li>
<li>3:每个数都是质数</li>
<li>4:所有数异或和为0</li>
</ul>
<p>$K\le{10^{9}},L\le{5\times{10^{4}}}$</p>
<h2 id="Solution-2">Solution</h2><p>基本的递推方程很容易列出来$f[i][j]$表示前$i$个数异或和为$j$的方案数<br>$f[i][x\otimes y]=\sum_{0\le x,y\le 2^{16}} f[i-1][x]\times f[1][y]$<br>$f[1][y]=1$当且仅当$y$为质数且$y\le L$<br>这样暴力递推显然是$O(KL^2)$的,$i$为偶数时分治一下可以做到$O(L^2\times logK)$的，复杂度还是不行<br>然后我们可以想到把这个东西搞成类似于FFT的东西。<br>设向量a,b,c,定义向量之间的运算$　\$,c=a \$ b　$<br>$c[i\otimes j]=\sum a[i]\times b[j],做变换tf,使得tf(a\$b)=tf(a)\times tf(b),逆变换dft(tf(x))=x$<br>设$a$向量，$a[i]$表示$i$堆石子异或和为$0\sim 2^{16}$的方案数，$a[1]$在素数位置处为$1$，其他位置为$0$<br>这样我们只需要用$logK$的时间算出$tf(a[1])^K$,在做逆变换得到$a[k]$即为答案<br>观察tf和dtf的性质，当只有一个元素时，$tf(x)=dtf(x)=x$<br>当有两个元素$X=(a,b),Y=(c,d)$时<br>$Z=X\$Y$<br>$Z[0]=X[0]\times Y[0]+X[1]\times Y[1]=ac+bd$<br>$Z[1]=X[0]\times Y[1]+X[1]\times Y[0]=ad+bc$<br>$另tf(a,b)=(a-b,a+b)$<br>则$tf(X)\times tf(Y) =(a-b,a+b)\times(c-d,c+d)$<br>$=((a-b)\times(c-d),(a+b)\times(c+d))$<br>$=(ac+bd-ad-bc,ac+bd+ad+bc)$<br>$=tf(ac+bd,ac-bd)$<br>$=tf((a,b)\$(c,d))$<br>$=tf(X\$Y)$<br>$有A，B两向量，用归纳法可证明出tf(A + B) = tf(A) + tf(B) $<br>$如果我们将X向量分成两段等长的向量X[1],X[2]$<br>我们归纳一下会发现$tf(X[1],X[2])=(tf(X1) - tf(X2), tf(X1) + tf(X2))$</p>
<p>$(X[1]-X[2])[i]=X[1][i]-X[2][i]$<br>$(X[1]+X[2])[i]=X[1][i]+X[2][i]$<br>$将A分为A[1],A[2],B分为B[1],B[2]$<br>$则依旧可以归纳证出tf( (A1,A2) \$ (B1,B2) ) = tf(A1,A2)\times{tf(B1,B2)}$<br>$即对任意向量A，B，tf(A\$B)=tf(A)\times{tf(B)}$<br>$说明当有两个元素时,tf(a,b)=(a-b,a+b)正好就是我们所需要的变换$<br>然后我们就可以用$tf(X[1],X[2])=(tf(X1) - tf(X2), tf(X1) + tf(X2))$来做啦<br>算出$tf(a[1])^K$,在做逆变换得到a[K]即为答案<br><img src="http://user-image.logdown.io/user/8987/blog/8877/post/221264/XAutFOlQ6muTRxZbqDmD_QQ%20Photo20140831154228.gif" alt=""><br>还有不明白的可以看<a href="http://apps.topcoder.com/wiki/display/tc/SRM+518" target="_blank" rel="external">http://apps.topcoder.com/wiki/display/tc/SRM+518</a></p>
<h2 id="Code">Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1</span>&lt;&lt;<span class="number">16</span>,M=<span class="number">1000000007</span>;</span><br><span class="line">ll a[N],inv2;</span><br><span class="line"><span class="function">ll <span class="title">P</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">	ll tmp=<span class="number">1l</span>l;</span><br><span class="line">	<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(y&amp;<span class="number">1</span>)	tmp=tmp*x%M;</span><br><span class="line">		x=x*x%M;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">trans</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r-<span class="number">1</span>)	<span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">int</span> len=(r-l)/<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">int</span> mid=l+len;</span><br><span class="line">	trans(l,mid),trans(mid,r);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;mid;++i)&#123;</span><br><span class="line">		ll x1=(a[i]-a[i+len]+M)%M,x2=(a[i]+a[i+len])%M;</span><br><span class="line">		a[i]=x1,a[i+len]=x2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(r-l==<span class="number">1</span>)	<span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">int</span> len=(r-l)/<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">int</span> mid=l+len;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;mid;++i)&#123;</span><br><span class="line">		ll x1=a[i],x2=a[i+len];</span><br><span class="line">		a[i]=(x1+x2)*inv2%M;</span><br><span class="line">		a[i+len]=(x2-x1)*inv2%M;</span><br><span class="line">	&#125;</span><br><span class="line">	reverse(l,mid),reverse(mid,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Nim&#123;</span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> K, <span class="keyword">int</span> L)</span></span>&#123;</span><br><span class="line">            inv2=P(<span class="number">2</span>,M-<span class="number">2</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=L;++i)</span><br><span class="line">				<span class="keyword">if</span>(!a[i])</span><br><span class="line">					<span class="keyword">for</span>(<span class="keyword">int</span> j=i+i;j&lt;=L;j+=i)	a[j]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=L;++i)	a[i]^=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">int</span> Log=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">while</span>(Log&lt;=L)	Log&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">			trans(<span class="number">0</span>,Log);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Log;++i)	a[i]=P(a[i],K);</span><br><span class="line">			reverse(<span class="number">0</span>,Log);</span><br><span class="line">			<span class="keyword">return</span> a[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Code-1"><a href="https://github.com/mlz000/topcoder/tree/master/srm518" target="_blank" rel="external">Code</a></h1>]]></content>
    <summary type="html">
    <![CDATA[<p><embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash"]]>
    </summary>
    
      <category term="topcoder题解" scheme="http://mlz000.github.io/categories/topcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[codechef 3D Queries(MGCH3D)]]></title>
    <link href="http://mlz000.github.io/2015/09/18/codechef-3D-Queries-MGCH3D/"/>
    <id>http://mlz000.github.io/2015/09/18/codechef-3D-Queries-MGCH3D/</id>
    <published>2015-09-18T09:07:10.000Z</published>
    <updated>2015-09-20T16:02:01.501Z</updated>
    <content type="html"><![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" width="235" height="346" wmode="opaque">


<h1 id="题外话">题外话</h1><p>这个题是cc 9月challenge的最后一题，当时没仔细考虑，以为这是个近似计算的题。。。赛后看了题解才猛然醒悟</p>
<h1 id="codechef_3D_Queries(MGCH3D)">codechef 3D Queries(MGCH3D)</h1><h2 id="Description">Description</h2><p>求$\sum_{i!=j} \frac{|A(X_i - X_j) + B(Y_i - Y_j) + C(Z_i - Z_j) + D|}{N(N-1)\sqrt{(X_i-X_j)^4 + (Y_i-Y_j)^4+(Z_i-Z_j)^4}}$<br>$2\le N \le 777777,1\le X, Y, Z, A, B, C\le 77$, $Q(1\le Q\le 77)$组询问,每次给$A, B, C, D$, 求上式的值。</p>
<h2 id="Solution">Solution</h2><p>$x, y, z$坐标都很小($1\le x, y, z\le 77$)，差的取值也很小，不妨构造多项式$A[N^2\times x + N\times y + z] += 1$, $B[N^2\times (77-x)+N\times (77 - y)+(77-z)]+=1$。令$N=77*2$<br>我们发现$A\times B=N^2\times (77+x[i]-x[j]) + N\times (77+y[i]-y[j]) + (77+z[i]-z[j])$<br>显然$x[i]-x[j],y[i]-y[j],z[i]-z[j]$我们可以通过，于是这题FFT一下就做完了= =<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">153</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>);</span><br><span class="line"><span class="keyword">double</span> D[<span class="number">80</span>][<span class="number">80</span>][<span class="number">80</span>];</span><br><span class="line"><span class="keyword">namespace</span> FFT &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> W = <span class="number">1</span> &lt;&lt; <span class="number">22</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>);</span><br><span class="line">  <span class="keyword">struct</span> Complex &#123;</span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    Complex(<span class="keyword">double</span> _x = <span class="number">0</span>, <span class="keyword">double</span> _y = <span class="number">0</span>) : x(_x), y(_y) &#123;&#125;</span><br><span class="line">    Complex <span class="keyword">operator</span> + (<span class="keyword">const</span> Complex &amp;t) <span class="keyword">const</span> &#123;<span class="keyword">return</span> Complex(x + t.x, y + t.y);&#125;</span><br><span class="line">    Complex&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> Complex &amp;t) &#123;x += t.x, y += t.y;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">    Complex <span class="keyword">operator</span> - (<span class="keyword">const</span> Complex &amp;t) <span class="keyword">const</span> &#123;<span class="keyword">return</span> Complex(x-t.x,y-t.y);&#125;</span><br><span class="line">    Complex&amp; <span class="keyword">operator</span> -= (<span class="keyword">const</span> Complex &amp;t) &#123;x -= t.x, y -= t.y;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">    Complex <span class="keyword">operator</span> * (<span class="keyword">const</span> Complex &amp;t) <span class="keyword">const</span> &#123;<span class="keyword">return</span> Complex(x * t.x - y * t.y, x * t.y + y * t.x);&#125;</span><br><span class="line">    Complex <span class="keyword">operator</span> / (<span class="keyword">const</span> <span class="keyword">double</span> &amp;t) <span class="keyword">const</span> &#123;<span class="keyword">return</span> Complex(x / t,y / t);&#125;</span><br><span class="line">    Complex&amp; <span class="keyword">operator</span> /= (<span class="keyword">const</span> <span class="keyword">double</span> &amp;t) &#123;x /= t, y /= t;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">real</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> x;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">imag</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> y;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(Complex a[], <span class="keyword">int</span> n, <span class="keyword">int</span> rev)</span> </span>&#123;<span class="comment">// rev=-1, reverse</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>, k; i &lt; n; ++i) &#123;</span><br><span class="line">          <span class="keyword">for</span> (k = n &gt;&gt; <span class="number">1</span>; k &gt; (j ^= k); k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">          <span class="keyword">if</span> (i &lt; j) swap(a[i], a[j]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">1</span>, ss = <span class="number">2</span>; s &lt; n; s &lt;&lt;= <span class="number">1</span>,ss &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="function">Complex <span class="title">wn</span><span class="params">(<span class="built_in">cos</span>(2 * PI * rev / ss)</span>, <span class="title">sin</span><span class="params">(2 * PI * rev / ss)</span>), w</span>;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j ; i &lt; n; i += ss) &#123;</span><br><span class="line">              <span class="keyword">for</span> (j = i, w = <span class="number">1</span>; j &lt; i + s; ++j, w = w * wn) &#123;</span><br><span class="line">                  Complex t = w * a[j + s];</span><br><span class="line">                  a[j + s] = a[j] - t; </span><br><span class="line">                  a[j] = a[j] + t;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (rev == -<span class="number">1</span>) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) a[i] /= n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">FFT::Complex A[FFT::W], B[FFT::W];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">sqrr</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x * x * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x, y, z; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;z);</span><br><span class="line">        --x, --y, --z;</span><br><span class="line">        <span class="keyword">int</span> t1 = N * N * x + N * y + z, t2 = N * N * (<span class="number">76</span> - x) + N * (<span class="number">76</span> - y) + (<span class="number">76</span> - z);</span><br><span class="line">        A[t1].x += <span class="number">1</span>, B[t2].x += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">77</span>; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">77</span>; ++j)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">77</span>; ++k)</span><br><span class="line">                D[i][j][k] = <span class="built_in">sqrt</span>(sqrr(i) + sqrr(j) + sqrr(k));</span><br><span class="line">    FFT::fft(A, FFT::W, <span class="number">1</span>);</span><br><span class="line">    FFT::fft(B, FFT::W, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; FFT::W; ++i)    A[i] = A[i] * B[i];</span><br><span class="line">    FFT::fft(A, FFT::W, -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> a, b, c, d;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; FFT::W; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="keyword">int</span>(A[i].real() + <span class="number">0.5</span>);</span><br><span class="line">            <span class="keyword">if</span> (!cnt)   <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> x = i / (N * N) - <span class="number">76</span>, y = i / N % N - <span class="number">76</span>, z = i % N - <span class="number">76</span>;</span><br><span class="line">            <span class="keyword">if</span> (!x &amp;&amp; !y &amp;&amp; !z) <span class="keyword">continue</span>;</span><br><span class="line">            ans += <span class="built_in">fabs</span>(a * x + b * y + c * z + d) * cnt / D[<span class="built_in">abs</span>(x)][<span class="built_in">abs</span>(y)][<span class="built_in">abs</span>(z)];</span><br><span class="line">        &#125;</span><br><span class="line">        ans /= n, ans /= n - <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.10lf\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="总结">总结</h2><p>自己还是太年轻，一看范围小就想着想忽略近似计算和乱搞，犯了方向性的错误= =。。还是要多加思考QvQ</p>
]]></content>
    <summary type="html">
    <![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" wi]]>
    </summary>
    
      <category term="codechef题解" scheme="http://mlz000.github.io/categories/codechef%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[srm 544]]></title>
    <link href="http://mlz000.github.io/2015/09/17/srm-544/"/>
    <id>http://mlz000.github.io/2015/09/17/srm-544/</id>
    <published>2015-09-17T12:15:48.000Z</published>
    <updated>2015-09-18T09:07:34.428Z</updated>
    <content type="html"><![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" width="235" height="346" wmode="opaque">

<h1 id="275">275</h1><p><hr></p>
<h2 id="Description">Description</h2><p>给你一些百分比，四舍五入之后，问原来可不可能是百分之百</p>
<h2 id="Solution">Solution</h2><p>数据范围非常小，暴力枚举分子分母到$1000$即可，做法很多。。。</p>
<h2 id="Code"><a href="https://github.com/mlz000/topcoder/blob/master/srm544/275.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">struct</span> ElectionFraudDiv1 &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">MinimumVoters</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; percentages)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = percentages.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">bool</span> f = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = percentages[j];</span><br><span class="line">                <span class="keyword">bool</span> ok = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= i; ++k) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((<span class="keyword">int</span>)((<span class="number">100.0000</span> / i * k) + <span class="number">0.500005</span>) == x) &#123;</span><br><span class="line">                        ok = <span class="number">1</span>;</span><br><span class="line">                        l += k;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &gt;= <span class="number">0</span>; --k) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((<span class="keyword">int</span>)((<span class="number">100.0000</span> / i * k) + <span class="number">0.500005</span>) == x) &#123;</span><br><span class="line">                        ok = <span class="number">1</span>;</span><br><span class="line">                        r += k;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!ok)    f = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (f &amp;&amp; l &lt;= i &amp;&amp; i &lt;= r)  <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="500">500</h1><p><hr></p>
<h2 id="Description-1">Description</h2><p>给你一个$N\times M的$0/1$矩阵，你每次可以选一条最短路线的路线，把路线左下部$0/1$取反。问全矩阵变成$0$最少操作次数。</p>
<h2 id="Solution-1">Solution</h2><p>容易发现，每次最边界的是早晚都要取的，而且，$1$的边界线会逐渐变小。每次从上到下，找最右边界，翻转即可，数据范围很小，暴力即可，复杂度$O(N^2\times M^2)$</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/topcoder/blob/master/srm544/500.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">struct</span> FlipGame &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minOperations</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> n = board.size(), m = board[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            ++ans;</span><br><span class="line">            <span class="keyword">int</span> last = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">bool</span> ok = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">                    <span class="keyword">if</span> (board[i][j] == <span class="string">'1'</span>) ok = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (!ok)    <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = last + <span class="number">1</span>; j &lt; m; ++j)</span><br><span class="line">                    <span class="keyword">if</span> (board[i][j] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                        last = j;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= last; ++j) </span><br><span class="line">                    board[i][j] = (board[i][j] == <span class="string">'1'</span>) ? <span class="string">'0'</span> : <span class="string">'1'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" wi]]>
    </summary>
    
      <category term="topcoder题解" scheme="http://mlz000.github.io/categories/topcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015-ACM多校训练第五场]]></title>
    <link href="http://mlz000.github.io/2015/09/17/2015-ACM%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E7%AC%AC%E4%BA%94%E5%9C%BA/"/>
    <id>http://mlz000.github.io/2015/09/17/2015-ACM多校训练第五场/</id>
    <published>2015-09-17T08:30:33.000Z</published>
    <updated>2015-09-17T12:16:41.459Z</updated>
    <content type="html"><![CDATA[<p><embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" width="235" height="346" wmode="opaque"></p>
<h1 id="题外话">题外话</h1><p>第五套感觉难度适中，今天把它补掉了。。。</p>
<p><hr></p>
<h1 id="hdu_5343(1001)_MZL’s_Circle_Zhou">hdu 5343(1001) MZL’s Circle Zhou</h1><h2 id="Solution">Solution</h2><p>这题深深的暴露了自己$SAM$水平只差，每次遇到$SAM$的题，都不太能做出来，说到底还是对$SAM$理解不够深刻吧= =。。<br>由于是把两个串拼起来，容易想到，对第一个串正着建立$SAM$，第二个串反过来建$SAM$，用$dp[i]$表示第二个串中以$i$这个字符开头的串有多少个。<br>然后在第一个串$SAM$节点上，如果不能转移到字母$c$，答案加上$dp[c]$就好了<br>仔细想想，其实这题并不难= =。。。自己太弱了</p>
<h2 id="Code"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/5/01.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5344(1002)_MZL’s_xor">hdu 5344(1002) MZL’s xor</h1><h2 id="Solution-1">Solution</h2><p>水题，发现不同项都抵消掉了。。。</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/5/02.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5345(1003)_MZL’s_combat">hdu 5345(1003) MZL’s combat</h1><h2 id="Solution-2">Solution</h2><p>貌似有点烦，先跳过= =过段时间补</p>
<p><hr>  </p>
<h1 id="hdu_5346(1004)_MZL’s_game">hdu 5346(1004) MZL’s game</h1><h2 id="Solution-3">Solution</h2><p>dp好题，状态设计非常高端，和前几天CC月赛一个题思想非常相似，很好的idea。<br>正常dp复杂度无法保证，不妨考虑，一个选人顺序的全排列，如果一个人挂了，就继续选下一个人。由于每个人在每个位置概率都是$\frac{1}{n}$，我们不妨考虑编号$1 \sim n$。<br>这样转化后我们就可以做了！<br>考虑$dp[j][i]$表示$i$这个人受到$j$次攻击的概率,分两种情况考虑</p>
<ul>
<li>(1) 第$i-1$个人没挂，则第$j$次攻击是来自第$i-1$的人的，于是$dp[j][i] = dp[j-1][i-1]\times (1-p)^{j-1}$</li>
<li>(2) 第$i-1$个人挂掉了，则受到的攻击次数和第$i-1$个人相同，于是$dp[j][i] = dp[j][i-1]\times (1-(1-p)^j)$<br>于是就做完了，考虑全排列的这种思想，学到了。。</li>
</ul>
<h2 id="Code-2"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/5/04.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5347(1005)_MZL’s_chemistry">hdu 5347(1005) MZL’s chemistry</h1><h2 id="Solution-4">Solution</h2><p>无聊题，随手打个表</p>
<h2 id="Code-3"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/5/05.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5348(1006)_MZL’s_endless_loop">hdu 5348(1006) MZL’s endless loop</h1><h2 id="Solution-5">Solution</h2><p>类似于一笔画，奇数度的两两连一下，跑欧拉回路就完了</p>
<h2 id="Code-4"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/5/06.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5349(1007)_MZL’s_simple_problem">hdu 5349(1007) MZL’s simple problem</h1><h2 id="Solution-6">Solution</h2><p>水题，直接用set或者维护一下都可以</p>
<h2 id="Code-5"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/5/07.cpp" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5350(1008)_MZL’s_munhaff_function">hdu 5350(1008) MZL’s munhaff function</h1><h2 id="Solution-7">Solution</h2><p>其实这就是个huffman树的生成过程，想明白那个式子和它的转换关系即可</p>
<h2 id="Code-6"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/5/08.cpp" target="_blank" rel="external">Code</a></h2><hr>

<h1 id="hdu_5351(1009)_MZL’s_Border">hdu 5351(1009) MZL’s Border</h1><h2 id="Solution-8">Solution</h2><p>水题，关于$Fibonacci$的一般打个表就看出规律了，找第一个$i,m+1&lt;|fib[i]|$,答案就是$m-|fib[i-2]|$</p>
<h2 id="Code-7"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/5/09.java" target="_blank" rel="external">Code</a></h2><p><hr></p>
<h1 id="hdu_5352(1010)_MZL’s_City">hdu 5352(1010) MZL’s City</h1><h2 id="Solution-9">Solution</h2><p>很容易想到的做法是，把每个操作$1$拆成$k$个点，与能相连的城市连一条边，跑匹配即可，由于要求字典序最小，倒着跑匹配即可。也可用最大流，费用流来做</p>
<h2 id="Code-8"><a href="https://github.com/mlz000/ACM/blob/master/2015%E5%A4%9A%E6%A0%A1/5/10.cpp" target="_blank" rel="external">Code</a></h2><p>完结撒花！<br>继续补题！&gt;_&lt;</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash"]]>
    </summary>
    
      <category term="hdu" scheme="http://mlz000.github.io/categories/hdu/"/>
    
      <category term="ACM多校题解" scheme="http://mlz000.github.io/categories/hdu/ACM%E5%A4%9A%E6%A0%A1%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[srm 543]]></title>
    <link href="http://mlz000.github.io/2015/09/14/srm-543/"/>
    <id>http://mlz000.github.io/2015/09/14/srm-543/</id>
    <published>2015-09-14T12:52:09.000Z</published>
    <updated>2015-09-17T08:31:51.905Z</updated>
    <content type="html"><![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" width="235" height="346" wmode="opaque">

<h1 id="250">250</h1><p><hr><br>求$A, B(A,B\le 4\times 10^{12})$之间所有数的$XOR$</p>
<h2 id="Solution">Solution</h2><p>转换成$1\sim B$异或和异或$1\sim A$异或和，容易发现当$n\ge 2时，1~\sim 2^n-1异或和为0$，$0,1,2,3$特判即可</p>
<h2 id="Code"><a href="https://github.com/mlz000/topcoder/blob/master/srm543/250.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="function">LL <span class="title">gao</span><span class="params">(LL x)</span> </span>&#123;</span><br><span class="line">    LL t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">40</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        LL p = <span class="number">1l</span>l &lt;&lt; i;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">3</span> || !x) <span class="keyword">return</span> t;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">2</span>) <span class="keyword">return</span> t + <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">1</span>) <span class="keyword">return</span> t + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (p &lt;= x) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((x - p + <span class="number">1</span>) &amp; <span class="number">1</span>)    t += p;</span><br><span class="line">            x ^= p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> EllysXors &#123;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getXor</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> L, <span class="keyword">long</span> <span class="keyword">long</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gao(R) ^ gao(L - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="500">500</h1><p><hr></p>
<h2 id="Description">Description</h2><p>在一个横坐标轴上有若干个垂直的线段.每个线段之间的距离为$width[i]$,现在让你从最左线段的左下角运动到最右线段的右上角<br>线段之间的运行速度为speed[i],在线段上垂直运动的速度为$walk$线段之间只能从整数坐标点运动到整数坐标点, 每个线段的高度都是一个定值$length$<br>请问最快多久可以到达目的地<br>$length\le 100000$</p>
<h2 id="Solution-1">Solution</h2><p>很容易想到dp,$dp[i][j]$表示过了前$i$个线段，当前在$j$的答案，暴力转移复杂度爆炸，容易发现，在每个线段的答案沿高度是单调的，转移时维护上一次转移的位置即可。</p>
<h2 id="Code-1"><a href="https://github.com/mlz000/topcoder/blob/master/srm543/500.cpp" target="_blank" rel="external">Code</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> inf = <span class="number">1e20</span>;</span><br><span class="line"><span class="keyword">double</span> dp[<span class="number">2</span>][<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">struct</span> EllysRivers &#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getMin</span><span class="params">(<span class="keyword">int</span> length, <span class="keyword">int</span> walk, <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; width, <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; speed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = width.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= length; ++i)   dp[<span class="number">0</span>][i] = (<span class="keyword">double</span>)i / walk;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= length; ++j)   dp[i &amp; <span class="number">1</span>][j] = inf;</span><br><span class="line">            <span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= length; ++j)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = last; k &lt;= j; ++k) &#123;</span><br><span class="line">                    <span class="keyword">double</span> t =  dp[(i - <span class="number">1</span>) &amp; <span class="number">1</span>][k] + hypot(width[i - <span class="number">1</span>], j - k) / speed[i - <span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> (t &gt; dp[i &amp; <span class="number">1</span>][j])   <span class="keyword">break</span>;</span><br><span class="line">                    dp[i &amp; <span class="number">1</span>][j] = t;</span><br><span class="line">                    last = k;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n &amp; <span class="number">1</span>][length];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<embed src="http://www.xiami.com/widget/5803277_112515512_235_346_FF8719_494949_0/collectPlayer.swf" type="application/x-shockwave-flash" wi]]>
    </summary>
    
      <category term="topcoder题解" scheme="http://mlz000.github.io/categories/topcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
</feed>